// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import ag_binary "github.com/gagliardetto/binary"

type LockerParams struct {
	WhitelistEnabled           bool
	MaxStakeVoteMultiplier     uint8
	MinStakeDuration           uint64
	MaxStakeDuration           uint64
	ProposalActivationMinVotes uint64
}

func (obj LockerParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `WhitelistEnabled` param:
	err = encoder.Encode(obj.WhitelistEnabled)
	if err != nil {
		return err
	}
	// Serialize `MaxStakeVoteMultiplier` param:
	err = encoder.Encode(obj.MaxStakeVoteMultiplier)
	if err != nil {
		return err
	}
	// Serialize `MinStakeDuration` param:
	err = encoder.Encode(obj.MinStakeDuration)
	if err != nil {
		return err
	}
	// Serialize `MaxStakeDuration` param:
	err = encoder.Encode(obj.MaxStakeDuration)
	if err != nil {
		return err
	}
	// Serialize `ProposalActivationMinVotes` param:
	err = encoder.Encode(obj.ProposalActivationMinVotes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LockerParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `WhitelistEnabled`:
	err = decoder.Decode(&obj.WhitelistEnabled)
	if err != nil {
		return err
	}
	// Deserialize `MaxStakeVoteMultiplier`:
	err = decoder.Decode(&obj.MaxStakeVoteMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `MinStakeDuration`:
	err = decoder.Decode(&obj.MinStakeDuration)
	if err != nil {
		return err
	}
	// Deserialize `MaxStakeDuration`:
	err = decoder.Decode(&obj.MaxStakeDuration)
	if err != nil {
		return err
	}
	// Deserialize `ProposalActivationMinVotes`:
	err = decoder.Decode(&obj.ProposalActivationMinVotes)
	if err != nil {
		return err
	}
	return nil
}
