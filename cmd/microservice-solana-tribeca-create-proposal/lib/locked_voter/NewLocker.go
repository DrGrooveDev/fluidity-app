// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NewLocker is the `newLocker` instruction.
type NewLocker struct {
	Bump   *uint8
	Params *LockerParams

	// [0] = [SIGNER] base
	//
	// [1] = [WRITE] locker
	//
	// [2] = [] tokenMint
	//
	// [3] = [] governor
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNewLockerInstructionBuilder creates a new `NewLocker` instruction builder.
func NewNewLockerInstructionBuilder() *NewLocker {
	nd := &NewLocker{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *NewLocker) SetBump(bump uint8) *NewLocker {
	inst.Bump = &bump
	return inst
}

// SetParams sets the "params" parameter.
func (inst *NewLocker) SetParams(params LockerParams) *NewLocker {
	inst.Params = &params
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *NewLocker) SetBaseAccount(base ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *NewLocker) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLockerAccount sets the "locker" account.
func (inst *NewLocker) SetLockerAccount(locker ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(locker).WRITE()
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *NewLocker) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenMintAccount sets the "tokenMint" account.
func (inst *NewLocker) SetTokenMintAccount(tokenMint ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenMint)
	return inst
}

// GetTokenMintAccount gets the "tokenMint" account.
func (inst *NewLocker) GetTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetGovernorAccount sets the "governor" account.
func (inst *NewLocker) SetGovernorAccount(governor ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *NewLocker) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *NewLocker) SetPayerAccount(payer ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *NewLocker) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *NewLocker) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *NewLocker {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *NewLocker) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst NewLocker) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_NewLocker,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NewLocker) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NewLocker) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *NewLocker) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NewLocker")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         base", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       locker", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    tokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     governor", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj NewLocker) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NewLocker) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewNewLockerInstruction declares a new NewLocker instruction with the provided parameters and accounts.
func NewNewLockerInstruction(
	// Parameters:
	bump uint8,
	params LockerParams,
	// Accounts:
	base ag_solanago.PublicKey,
	locker ag_solanago.PublicKey,
	tokenMint ag_solanago.PublicKey,
	governor ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *NewLocker {
	return NewNewLockerInstructionBuilder().
		SetBump(bump).
		SetParams(params).
		SetBaseAccount(base).
		SetLockerAccount(locker).
		SetTokenMintAccount(tokenMint).
		SetGovernorAccount(governor).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
