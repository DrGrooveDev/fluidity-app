// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ApproveProgramLockPrivilege is the `approveProgramLockPrivilege` instruction.
type ApproveProgramLockPrivilege struct {
	Bump *uint8

	// [0] = [] locker
	//
	// [1] = [WRITE] whitelistEntry
	//
	// [2] = [] governor
	//
	// [3] = [SIGNER] smartWallet
	//
	// [4] = [] executableId
	//
	// [5] = [] whitelistedOwner
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewApproveProgramLockPrivilegeInstructionBuilder creates a new `ApproveProgramLockPrivilege` instruction builder.
func NewApproveProgramLockPrivilegeInstructionBuilder() *ApproveProgramLockPrivilege {
	nd := &ApproveProgramLockPrivilege{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *ApproveProgramLockPrivilege) SetBump(bump uint8) *ApproveProgramLockPrivilege {
	inst.Bump = &bump
	return inst
}

// SetLockerAccount sets the "locker" account.
func (inst *ApproveProgramLockPrivilege) SetLockerAccount(locker ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(locker)
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *ApproveProgramLockPrivilege) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhitelistEntryAccount sets the "whitelistEntry" account.
func (inst *ApproveProgramLockPrivilege) SetWhitelistEntryAccount(whitelistEntry ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whitelistEntry).WRITE()
	return inst
}

// GetWhitelistEntryAccount gets the "whitelistEntry" account.
func (inst *ApproveProgramLockPrivilege) GetWhitelistEntryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGovernorAccount sets the "governor" account.
func (inst *ApproveProgramLockPrivilege) SetGovernorAccount(governor ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *ApproveProgramLockPrivilege) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *ApproveProgramLockPrivilege) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(smartWallet).SIGNER()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *ApproveProgramLockPrivilege) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetExecutableIdAccount sets the "executableId" account.
func (inst *ApproveProgramLockPrivilege) SetExecutableIdAccount(executableId ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(executableId)
	return inst
}

// GetExecutableIdAccount gets the "executableId" account.
func (inst *ApproveProgramLockPrivilege) GetExecutableIdAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetWhitelistedOwnerAccount sets the "whitelistedOwner" account.
func (inst *ApproveProgramLockPrivilege) SetWhitelistedOwnerAccount(whitelistedOwner ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(whitelistedOwner)
	return inst
}

// GetWhitelistedOwnerAccount gets the "whitelistedOwner" account.
func (inst *ApproveProgramLockPrivilege) GetWhitelistedOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *ApproveProgramLockPrivilege) SetPayerAccount(payer ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *ApproveProgramLockPrivilege) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ApproveProgramLockPrivilege) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ApproveProgramLockPrivilege) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst ApproveProgramLockPrivilege) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ApproveProgramLockPrivilege,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ApproveProgramLockPrivilege) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ApproveProgramLockPrivilege) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhitelistEntry is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ExecutableId is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.WhitelistedOwner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ApproveProgramLockPrivilege) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ApproveProgramLockPrivilege")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Bump", *inst.Bump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          locker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  whitelistEntry", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        governor", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     smartWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    executableId", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("whitelistedOwner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj ApproveProgramLockPrivilege) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ApproveProgramLockPrivilege) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	return nil
}

// NewApproveProgramLockPrivilegeInstruction declares a new ApproveProgramLockPrivilege instruction with the provided parameters and accounts.
func NewApproveProgramLockPrivilegeInstruction(
	// Parameters:
	bump uint8,
	// Accounts:
	locker ag_solanago.PublicKey,
	whitelistEntry ag_solanago.PublicKey,
	governor ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey,
	executableId ag_solanago.PublicKey,
	whitelistedOwner ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ApproveProgramLockPrivilege {
	return NewApproveProgramLockPrivilegeInstructionBuilder().
		SetBump(bump).
		SetLockerAccount(locker).
		SetWhitelistEntryAccount(whitelistEntry).
		SetGovernorAccount(governor).
		SetSmartWalletAccount(smartWallet).
		SetExecutableIdAccount(executableId).
		SetWhitelistedOwnerAccount(whitelistedOwner).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
