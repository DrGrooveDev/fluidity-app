// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Lock is the `lock` instruction.
type Lock struct {
	Amount   *uint64
	Duration *int64

	// [0] = [WRITE] locker
	//
	// [1] = [WRITE] escrow
	//
	// [2] = [WRITE] escrowTokens
	//
	// [3] = [SIGNER] escrowOwner
	//
	// [4] = [WRITE] sourceTokens
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewLockInstructionBuilder creates a new `Lock` instruction builder.
func NewLockInstructionBuilder() *Lock {
	nd := &Lock{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *Lock) SetAmount(amount uint64) *Lock {
	inst.Amount = &amount
	return inst
}

// SetDuration sets the "duration" parameter.
func (inst *Lock) SetDuration(duration int64) *Lock {
	inst.Duration = &duration
	return inst
}

// SetLockerAccount sets the "locker" account.
func (inst *Lock) SetLockerAccount(locker ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(locker).WRITE()
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *Lock) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *Lock) SetEscrowAccount(escrow ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *Lock) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEscrowTokensAccount sets the "escrowTokens" account.
func (inst *Lock) SetEscrowTokensAccount(escrowTokens ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(escrowTokens).WRITE()
	return inst
}

// GetEscrowTokensAccount gets the "escrowTokens" account.
func (inst *Lock) GetEscrowTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEscrowOwnerAccount sets the "escrowOwner" account.
func (inst *Lock) SetEscrowOwnerAccount(escrowOwner ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(escrowOwner).SIGNER()
	return inst
}

// GetEscrowOwnerAccount gets the "escrowOwner" account.
func (inst *Lock) GetEscrowOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSourceTokensAccount sets the "sourceTokens" account.
func (inst *Lock) SetSourceTokensAccount(sourceTokens ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(sourceTokens).WRITE()
	return inst
}

// GetSourceTokensAccount gets the "sourceTokens" account.
func (inst *Lock) GetSourceTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Lock) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Lock {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Lock) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst Lock) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Lock,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Lock) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Lock) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Duration == nil {
			return errors.New("Duration parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EscrowTokens is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EscrowOwner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SourceTokens is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Lock) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Lock")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param("Duration", *inst.Duration))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      locker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      escrow", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("escrowTokens", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" escrowOwner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("sourceTokens", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj Lock) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Lock) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	return nil
}

// NewLockInstruction declares a new Lock instruction with the provided parameters and accounts.
func NewLockInstruction(
	// Parameters:
	amount uint64,
	duration int64,
	// Accounts:
	locker ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	escrowTokens ag_solanago.PublicKey,
	escrowOwner ag_solanago.PublicKey,
	sourceTokens ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Lock {
	return NewLockInstructionBuilder().
		SetAmount(amount).
		SetDuration(duration).
		SetLockerAccount(locker).
		SetEscrowAccount(escrow).
		SetEscrowTokensAccount(escrowTokens).
		SetEscrowOwnerAccount(escrowOwner).
		SetSourceTokensAccount(sourceTokens).
		SetTokenProgramAccount(tokenProgram)
}
