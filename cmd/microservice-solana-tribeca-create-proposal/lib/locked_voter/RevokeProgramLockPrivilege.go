// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// RevokeProgramLockPrivilege is the `revokeProgramLockPrivilege` instruction.
type RevokeProgramLockPrivilege struct {

	// [0] = [] locker
	//
	// [1] = [WRITE] whitelistEntry
	//
	// [2] = [] governor
	//
	// [3] = [SIGNER] smartWallet
	//
	// [4] = [] executableId
	//
	// [5] = [WRITE, SIGNER] payer
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewRevokeProgramLockPrivilegeInstructionBuilder creates a new `RevokeProgramLockPrivilege` instruction builder.
func NewRevokeProgramLockPrivilegeInstructionBuilder() *RevokeProgramLockPrivilege {
	nd := &RevokeProgramLockPrivilege{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetLockerAccount sets the "locker" account.
func (inst *RevokeProgramLockPrivilege) SetLockerAccount(locker ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(locker)
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *RevokeProgramLockPrivilege) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetWhitelistEntryAccount sets the "whitelistEntry" account.
func (inst *RevokeProgramLockPrivilege) SetWhitelistEntryAccount(whitelistEntry ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(whitelistEntry).WRITE()
	return inst
}

// GetWhitelistEntryAccount gets the "whitelistEntry" account.
func (inst *RevokeProgramLockPrivilege) GetWhitelistEntryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetGovernorAccount sets the "governor" account.
func (inst *RevokeProgramLockPrivilege) SetGovernorAccount(governor ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *RevokeProgramLockPrivilege) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *RevokeProgramLockPrivilege) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(smartWallet).SIGNER()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *RevokeProgramLockPrivilege) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetExecutableIdAccount sets the "executableId" account.
func (inst *RevokeProgramLockPrivilege) SetExecutableIdAccount(executableId ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(executableId)
	return inst
}

// GetExecutableIdAccount gets the "executableId" account.
func (inst *RevokeProgramLockPrivilege) GetExecutableIdAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
func (inst *RevokeProgramLockPrivilege) SetPayerAccount(payer ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *RevokeProgramLockPrivilege) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst RevokeProgramLockPrivilege) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_RevokeProgramLockPrivilege,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst RevokeProgramLockPrivilege) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *RevokeProgramLockPrivilege) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.WhitelistEntry is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ExecutableId is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
	}
	return nil
}

func (inst *RevokeProgramLockPrivilege) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("RevokeProgramLockPrivilege")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        locker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("whitelistEntry", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      governor", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   smartWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  executableId", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("         payer", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj RevokeProgramLockPrivilege) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *RevokeProgramLockPrivilege) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewRevokeProgramLockPrivilegeInstruction declares a new RevokeProgramLockPrivilege instruction with the provided parameters and accounts.
func NewRevokeProgramLockPrivilegeInstruction(
	// Accounts:
	locker ag_solanago.PublicKey,
	whitelistEntry ag_solanago.PublicKey,
	governor ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey,
	executableId ag_solanago.PublicKey,
	payer ag_solanago.PublicKey) *RevokeProgramLockPrivilege {
	return NewRevokeProgramLockPrivilegeInstructionBuilder().
		SetLockerAccount(locker).
		SetWhitelistEntryAccount(whitelistEntry).
		SetGovernorAccount(governor).
		SetSmartWalletAccount(smartWallet).
		SetExecutableIdAccount(executableId).
		SetPayerAccount(payer)
}
