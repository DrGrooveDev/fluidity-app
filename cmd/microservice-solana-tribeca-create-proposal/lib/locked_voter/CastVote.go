// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CastVote is the `castVote` instruction.
type CastVote struct {
	Side *uint8

	// [0] = [] locker
	//
	// [1] = [] escrow
	//
	// [2] = [SIGNER] voteDelegate
	//
	// [3] = [WRITE] proposal
	//
	// [4] = [WRITE] vote
	//
	// [5] = [] governor
	//
	// [6] = [] governProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCastVoteInstructionBuilder creates a new `CastVote` instruction builder.
func NewCastVoteInstructionBuilder() *CastVote {
	nd := &CastVote{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetSide sets the "side" parameter.
func (inst *CastVote) SetSide(side uint8) *CastVote {
	inst.Side = &side
	return inst
}

// SetLockerAccount sets the "locker" account.
func (inst *CastVote) SetLockerAccount(locker ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(locker)
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *CastVote) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *CastVote) SetEscrowAccount(escrow ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(escrow)
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *CastVote) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVoteDelegateAccount sets the "voteDelegate" account.
func (inst *CastVote) SetVoteDelegateAccount(voteDelegate ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(voteDelegate).SIGNER()
	return inst
}

// GetVoteDelegateAccount gets the "voteDelegate" account.
func (inst *CastVote) GetVoteDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProposalAccount sets the "proposal" account.
func (inst *CastVote) SetProposalAccount(proposal ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *CastVote) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetVoteAccount sets the "vote" account.
func (inst *CastVote) SetVoteAccount(vote ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vote).WRITE()
	return inst
}

// GetVoteAccount gets the "vote" account.
func (inst *CastVote) GetVoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetGovernorAccount sets the "governor" account.
func (inst *CastVote) SetGovernorAccount(governor ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *CastVote) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetGovernProgramAccount sets the "governProgram" account.
func (inst *CastVote) SetGovernProgramAccount(governProgram ag_solanago.PublicKey) *CastVote {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(governProgram)
	return inst
}

// GetGovernProgramAccount gets the "governProgram" account.
func (inst *CastVote) GetGovernProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CastVote) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CastVote,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CastVote) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CastVote) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Side == nil {
			return errors.New("Side parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.VoteDelegate is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Vote is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.GovernProgram is not set")
		}
	}
	return nil
}

func (inst *CastVote) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CastVote")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Side", *inst.Side))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       locker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       escrow", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" voteDelegate", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         vote", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     governor", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("governProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CastVote) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CastVote) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	return nil
}

// NewCastVoteInstruction declares a new CastVote instruction with the provided parameters and accounts.
func NewCastVoteInstruction(
	// Parameters:
	side uint8,
	// Accounts:
	locker ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	voteDelegate ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	vote ag_solanago.PublicKey,
	governor ag_solanago.PublicKey,
	governProgram ag_solanago.PublicKey) *CastVote {
	return NewCastVoteInstructionBuilder().
		SetSide(side).
		SetLockerAccount(locker).
		SetEscrowAccount(escrow).
		SetVoteDelegateAccount(voteDelegate).
		SetProposalAccount(proposal).
		SetVoteAccount(vote).
		SetGovernorAccount(governor).
		SetGovernProgramAccount(governProgram)
}
