// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Exit is the `exit` instruction.
type Exit struct {

	// [0] = [WRITE] locker
	//
	// [1] = [WRITE] escrow
	//
	// [2] = [SIGNER] escrowOwner
	//
	// [3] = [WRITE] escrowTokens
	//
	// [4] = [WRITE] destinationTokens
	//
	// [5] = [WRITE, SIGNER] payer
	//
	// [6] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExitInstructionBuilder creates a new `Exit` instruction builder.
func NewExitInstructionBuilder() *Exit {
	nd := &Exit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetLockerAccount sets the "locker" account.
func (inst *Exit) SetLockerAccount(locker ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(locker).WRITE()
	return inst
}

// GetLockerAccount gets the "locker" account.
func (inst *Exit) GetLockerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEscrowAccount sets the "escrow" account.
func (inst *Exit) SetEscrowAccount(escrow ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *Exit) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEscrowOwnerAccount sets the "escrowOwner" account.
func (inst *Exit) SetEscrowOwnerAccount(escrowOwner ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(escrowOwner).SIGNER()
	return inst
}

// GetEscrowOwnerAccount gets the "escrowOwner" account.
func (inst *Exit) GetEscrowOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetEscrowTokensAccount sets the "escrowTokens" account.
func (inst *Exit) SetEscrowTokensAccount(escrowTokens ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(escrowTokens).WRITE()
	return inst
}

// GetEscrowTokensAccount gets the "escrowTokens" account.
func (inst *Exit) GetEscrowTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetDestinationTokensAccount sets the "destinationTokens" account.
func (inst *Exit) SetDestinationTokensAccount(destinationTokens ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(destinationTokens).WRITE()
	return inst
}

// GetDestinationTokensAccount gets the "destinationTokens" account.
func (inst *Exit) GetDestinationTokensAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPayerAccount sets the "payer" account.
func (inst *Exit) SetPayerAccount(payer ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Exit) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Exit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Exit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Exit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst Exit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Exit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Exit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Exit) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Locker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EscrowOwner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.EscrowTokens is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.DestinationTokens is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Exit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Exit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           locker", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           escrow", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      escrowOwner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     escrowTokens", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("destinationTokens", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("            payer", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj Exit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Exit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewExitInstruction declares a new Exit instruction with the provided parameters and accounts.
func NewExitInstruction(
	// Accounts:
	locker ag_solanago.PublicKey,
	escrow ag_solanago.PublicKey,
	escrowOwner ag_solanago.PublicKey,
	escrowTokens ag_solanago.PublicKey,
	destinationTokens ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Exit {
	return NewExitInstructionBuilder().
		SetLockerAccount(locker).
		SetEscrowAccount(escrow).
		SetEscrowOwnerAccount(escrowOwner).
		SetEscrowTokensAccount(escrowTokens).
		SetDestinationTokensAccount(destinationTokens).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram)
}
