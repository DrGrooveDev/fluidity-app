// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package locked_voter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetVoteDelegate is the `setVoteDelegate` instruction.
type SetVoteDelegate struct {
	NewDelegate *ag_solanago.PublicKey

	// [0] = [WRITE] escrow
	//
	// [1] = [SIGNER] escrowOwner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetVoteDelegateInstructionBuilder creates a new `SetVoteDelegate` instruction builder.
func NewSetVoteDelegateInstructionBuilder() *SetVoteDelegate {
	nd := &SetVoteDelegate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewDelegate sets the "newDelegate" parameter.
func (inst *SetVoteDelegate) SetNewDelegate(newDelegate ag_solanago.PublicKey) *SetVoteDelegate {
	inst.NewDelegate = &newDelegate
	return inst
}

// SetEscrowAccount sets the "escrow" account.
func (inst *SetVoteDelegate) SetEscrowAccount(escrow ag_solanago.PublicKey) *SetVoteDelegate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(escrow).WRITE()
	return inst
}

// GetEscrowAccount gets the "escrow" account.
func (inst *SetVoteDelegate) GetEscrowAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetEscrowOwnerAccount sets the "escrowOwner" account.
func (inst *SetVoteDelegate) SetEscrowOwnerAccount(escrowOwner ag_solanago.PublicKey) *SetVoteDelegate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(escrowOwner).SIGNER()
	return inst
}

// GetEscrowOwnerAccount gets the "escrowOwner" account.
func (inst *SetVoteDelegate) GetEscrowOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetVoteDelegate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetVoteDelegate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetVoteDelegate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetVoteDelegate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewDelegate == nil {
			return errors.New("NewDelegate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Escrow is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.EscrowOwner is not set")
		}
	}
	return nil
}

func (inst *SetVoteDelegate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetVoteDelegate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewDelegate", *inst.NewDelegate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     escrow", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("escrowOwner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetVoteDelegate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewDelegate` param:
	err = encoder.Encode(obj.NewDelegate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetVoteDelegate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewDelegate`:
	err = decoder.Decode(&obj.NewDelegate)
	if err != nil {
		return err
	}
	return nil
}

// NewSetVoteDelegateInstruction declares a new SetVoteDelegate instruction with the provided parameters and accounts.
func NewSetVoteDelegateInstruction(
	// Parameters:
	newDelegate ag_solanago.PublicKey,
	// Accounts:
	escrow ag_solanago.PublicKey,
	escrowOwner ag_solanago.PublicKey) *SetVoteDelegate {
	return NewSetVoteDelegateInstructionBuilder().
		SetNewDelegate(newDelegate).
		SetEscrowAccount(escrow).
		SetEscrowOwnerAccount(escrowOwner)
}
