// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NewVote is the `newVote` instruction.
type NewVote struct {
	Bump  *uint8
	Voter *ag_solanago.PublicKey

	// [0] = [] proposal
	//
	// [1] = [WRITE] vote
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNewVoteInstructionBuilder creates a new `NewVote` instruction builder.
func NewNewVoteInstructionBuilder() *NewVote {
	nd := &NewVote{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *NewVote) SetBump(bump uint8) *NewVote {
	inst.Bump = &bump
	return inst
}

// SetVoter sets the "voter" parameter.
func (inst *NewVote) SetVoter(voter ag_solanago.PublicKey) *NewVote {
	inst.Voter = &voter
	return inst
}

// SetProposalAccount sets the "proposal" account.
func (inst *NewVote) SetProposalAccount(proposal ag_solanago.PublicKey) *NewVote {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(proposal)
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *NewVote) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetVoteAccount sets the "vote" account.
func (inst *NewVote) SetVoteAccount(vote ag_solanago.PublicKey) *NewVote {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vote).WRITE()
	return inst
}

// GetVoteAccount gets the "vote" account.
func (inst *NewVote) GetVoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *NewVote) SetPayerAccount(payer ag_solanago.PublicKey) *NewVote {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *NewVote) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *NewVote) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *NewVote {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *NewVote) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst NewVote) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_NewVote,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NewVote) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NewVote) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Voter == nil {
			return errors.New("Voter parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vote is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *NewVote) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NewVote")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("Voter", *inst.Voter))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         vote", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj NewVote) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Voter` param:
	err = encoder.Encode(obj.Voter)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NewVote) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Voter`:
	err = decoder.Decode(&obj.Voter)
	if err != nil {
		return err
	}
	return nil
}

// NewNewVoteInstruction declares a new NewVote instruction with the provided parameters and accounts.
func NewNewVoteInstruction(
	// Parameters:
	bump uint8,
	voter ag_solanago.PublicKey,
	// Accounts:
	proposal ag_solanago.PublicKey,
	vote ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *NewVote {
	return NewNewVoteInstructionBuilder().
		SetBump(bump).
		SetVoter(voter).
		SetProposalAccount(proposal).
		SetVoteAccount(vote).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
