// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("3qgPc7zvnjA2fjLMKc94BhTQCKXqShxB5EobZu7scdhW")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Govern"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_CreateGovernor = ag_binary.TypeID([8]byte{103, 30, 78, 252, 28, 128, 40, 3})

	Instruction_CreateProposal = ag_binary.TypeID([8]byte{132, 116, 68, 174, 216, 160, 198, 22})

	Instruction_ActivateProposal = ag_binary.TypeID([8]byte{90, 186, 203, 234, 70, 185, 191, 21})

	Instruction_CancelProposal = ag_binary.TypeID([8]byte{106, 74, 128, 146, 19, 65, 39, 23})

	Instruction_QueueProposal = ag_binary.TypeID([8]byte{168, 219, 139, 211, 205, 152, 125, 110})

	Instruction_NewVote = ag_binary.TypeID([8]byte{163, 108, 157, 189, 140, 80, 13, 143})

	Instruction_SetVote = ag_binary.TypeID([8]byte{171, 33, 83, 172, 148, 215, 239, 97})

	Instruction_SetGovernanceParams = ag_binary.TypeID([8]byte{175, 187, 3, 73, 8, 251, 67, 178})

	Instruction_SetElectorate = ag_binary.TypeID([8]byte{145, 135, 92, 16, 77, 195, 145, 91})

	Instruction_CreateProposalMeta = ag_binary.TypeID([8]byte{238, 138, 212, 160, 46, 53, 51, 88})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateGovernor:
		return "CreateGovernor"
	case Instruction_CreateProposal:
		return "CreateProposal"
	case Instruction_ActivateProposal:
		return "ActivateProposal"
	case Instruction_CancelProposal:
		return "CancelProposal"
	case Instruction_QueueProposal:
		return "QueueProposal"
	case Instruction_NewVote:
		return "NewVote"
	case Instruction_SetVote:
		return "SetVote"
	case Instruction_SetGovernanceParams:
		return "SetGovernanceParams"
	case Instruction_SetElectorate:
		return "SetElectorate"
	case Instruction_CreateProposalMeta:
		return "CreateProposalMeta"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_governor", (*CreateGovernor)(nil),
		},
		{
			"create_proposal", (*CreateProposal)(nil),
		},
		{
			"activate_proposal", (*ActivateProposal)(nil),
		},
		{
			"cancel_proposal", (*CancelProposal)(nil),
		},
		{
			"queue_proposal", (*QueueProposal)(nil),
		},
		{
			"new_vote", (*NewVote)(nil),
		},
		{
			"set_vote", (*SetVote)(nil),
		},
		{
			"set_governance_params", (*SetGovernanceParams)(nil),
		},
		{
			"set_electorate", (*SetElectorate)(nil),
		},
		{
			"create_proposal_meta", (*CreateProposalMeta)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
