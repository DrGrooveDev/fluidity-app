// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ActivateProposal is the `activateProposal` instruction.
type ActivateProposal struct {

	// [0] = [] governor
	//
	// [1] = [WRITE] proposal
	//
	// [2] = [SIGNER] electorate
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewActivateProposalInstructionBuilder creates a new `ActivateProposal` instruction builder.
func NewActivateProposalInstructionBuilder() *ActivateProposal {
	nd := &ActivateProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetGovernorAccount sets the "governor" account.
func (inst *ActivateProposal) SetGovernorAccount(governor ag_solanago.PublicKey) *ActivateProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *ActivateProposal) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
func (inst *ActivateProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *ActivateProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *ActivateProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetElectorateAccount sets the "electorate" account.
func (inst *ActivateProposal) SetElectorateAccount(electorate ag_solanago.PublicKey) *ActivateProposal {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(electorate).SIGNER()
	return inst
}

// GetElectorateAccount gets the "electorate" account.
func (inst *ActivateProposal) GetElectorateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst ActivateProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ActivateProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ActivateProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ActivateProposal) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Electorate is not set")
		}
	}
	return nil
}

func (inst *ActivateProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ActivateProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  governor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("electorate", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ActivateProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ActivateProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewActivateProposalInstruction declares a new ActivateProposal instruction with the provided parameters and accounts.
func NewActivateProposalInstruction(
	// Accounts:
	governor ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	electorate ag_solanago.PublicKey) *ActivateProposal {
	return NewActivateProposalInstructionBuilder().
		SetGovernorAccount(governor).
		SetProposalAccount(proposal).
		SetElectorateAccount(electorate)
}
