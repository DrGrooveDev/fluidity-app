// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetElectorate is the `setElectorate` instruction.
type SetElectorate struct {
	NewElectorate *ag_solanago.PublicKey

	// [0] = [WRITE] governor
	//
	// [1] = [SIGNER] smartWallet
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetElectorateInstructionBuilder creates a new `SetElectorate` instruction builder.
func NewSetElectorateInstructionBuilder() *SetElectorate {
	nd := &SetElectorate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetNewElectorate sets the "newElectorate" parameter.
func (inst *SetElectorate) SetNewElectorate(newElectorate ag_solanago.PublicKey) *SetElectorate {
	inst.NewElectorate = &newElectorate
	return inst
}

// SetGovernorAccount sets the "governor" account.
func (inst *SetElectorate) SetGovernorAccount(governor ag_solanago.PublicKey) *SetElectorate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(governor).WRITE()
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *SetElectorate) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *SetElectorate) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *SetElectorate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(smartWallet).SIGNER()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *SetElectorate) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetElectorate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetElectorate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetElectorate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetElectorate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewElectorate == nil {
			return errors.New("NewElectorate parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
	}
	return nil
}

func (inst *SetElectorate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetElectorate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewElectorate", *inst.NewElectorate))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   governor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("smartWallet", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetElectorate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewElectorate` param:
	err = encoder.Encode(obj.NewElectorate)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetElectorate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewElectorate`:
	err = decoder.Decode(&obj.NewElectorate)
	if err != nil {
		return err
	}
	return nil
}

// NewSetElectorateInstruction declares a new SetElectorate instruction with the provided parameters and accounts.
func NewSetElectorateInstruction(
	// Parameters:
	newElectorate ag_solanago.PublicKey,
	// Accounts:
	governor ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey) *SetElectorate {
	return NewSetElectorateInstructionBuilder().
		SetNewElectorate(newElectorate).
		SetGovernorAccount(governor).
		SetSmartWalletAccount(smartWallet)
}
