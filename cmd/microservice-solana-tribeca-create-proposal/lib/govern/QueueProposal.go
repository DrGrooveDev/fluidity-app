// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// QueueProposal is the `queueProposal` instruction.
type QueueProposal struct {
	TxBump *uint8

	// [0] = [] governor
	//
	// [1] = [WRITE] proposal
	//
	// [2] = [WRITE] transaction
	//
	// [3] = [WRITE] smartWallet
	//
	// [4] = [SIGNER] payer
	//
	// [5] = [] smartWalletProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewQueueProposalInstructionBuilder creates a new `QueueProposal` instruction builder.
func NewQueueProposalInstructionBuilder() *QueueProposal {
	nd := &QueueProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetTxBump sets the "txBump" parameter.
func (inst *QueueProposal) SetTxBump(txBump uint8) *QueueProposal {
	inst.TxBump = &txBump
	return inst
}

// SetGovernorAccount sets the "governor" account.
func (inst *QueueProposal) SetGovernorAccount(governor ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *QueueProposal) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
func (inst *QueueProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *QueueProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTransactionAccount sets the "transaction" account.
func (inst *QueueProposal) SetTransactionAccount(transaction ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
func (inst *QueueProposal) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *QueueProposal) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(smartWallet).WRITE()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *QueueProposal) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *QueueProposal) SetPayerAccount(payer ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *QueueProposal) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSmartWalletProgramAccount sets the "smartWalletProgram" account.
func (inst *QueueProposal) SetSmartWalletProgramAccount(smartWalletProgram ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(smartWalletProgram)
	return inst
}

// GetSmartWalletProgramAccount gets the "smartWalletProgram" account.
func (inst *QueueProposal) GetSmartWalletProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *QueueProposal) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *QueueProposal {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *QueueProposal) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst QueueProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_QueueProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst QueueProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *QueueProposal) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TxBump == nil {
			return errors.New("TxBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SmartWalletProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *QueueProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("QueueProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TxBump", *inst.TxBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("          governor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       transaction", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       smartWallet", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("smartWalletProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj QueueProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TxBump` param:
	err = encoder.Encode(obj.TxBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *QueueProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TxBump`:
	err = decoder.Decode(&obj.TxBump)
	if err != nil {
		return err
	}
	return nil
}

// NewQueueProposalInstruction declares a new QueueProposal instruction with the provided parameters and accounts.
func NewQueueProposalInstruction(
	// Parameters:
	txBump uint8,
	// Accounts:
	governor ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	smartWalletProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *QueueProposal {
	return NewQueueProposalInstructionBuilder().
		SetTxBump(txBump).
		SetGovernorAccount(governor).
		SetProposalAccount(proposal).
		SetTransactionAccount(transaction).
		SetSmartWalletAccount(smartWallet).
		SetPayerAccount(payer).
		SetSmartWalletProgramAccount(smartWalletProgram).
		SetSystemProgramAccount(systemProgram)
}
