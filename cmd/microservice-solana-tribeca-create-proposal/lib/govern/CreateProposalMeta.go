// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateProposalMeta is the `createProposalMeta` instruction.
type CreateProposalMeta struct {
	Bump            *uint8
	Title           *string
	DescriptionLink *string

	// [0] = [] proposal
	//
	// [1] = [SIGNER] proposer
	//
	// [2] = [WRITE] proposalMeta
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateProposalMetaInstructionBuilder creates a new `CreateProposalMeta` instruction builder.
func NewCreateProposalMetaInstructionBuilder() *CreateProposalMeta {
	nd := &CreateProposalMeta{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateProposalMeta) SetBump(bump uint8) *CreateProposalMeta {
	inst.Bump = &bump
	return inst
}

// SetTitle sets the "title" parameter.
func (inst *CreateProposalMeta) SetTitle(title string) *CreateProposalMeta {
	inst.Title = &title
	return inst
}

// SetDescriptionLink sets the "descriptionLink" parameter.
func (inst *CreateProposalMeta) SetDescriptionLink(descriptionLink string) *CreateProposalMeta {
	inst.DescriptionLink = &descriptionLink
	return inst
}

// SetProposalAccount sets the "proposal" account.
func (inst *CreateProposalMeta) SetProposalAccount(proposal ag_solanago.PublicKey) *CreateProposalMeta {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(proposal)
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *CreateProposalMeta) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposerAccount sets the "proposer" account.
func (inst *CreateProposalMeta) SetProposerAccount(proposer ag_solanago.PublicKey) *CreateProposalMeta {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposer).SIGNER()
	return inst
}

// GetProposerAccount gets the "proposer" account.
func (inst *CreateProposalMeta) GetProposerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProposalMetaAccount sets the "proposalMeta" account.
func (inst *CreateProposalMeta) SetProposalMetaAccount(proposalMeta ag_solanago.PublicKey) *CreateProposalMeta {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(proposalMeta).WRITE()
	return inst
}

// GetProposalMetaAccount gets the "proposalMeta" account.
func (inst *CreateProposalMeta) GetProposalMetaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateProposalMeta) SetPayerAccount(payer ag_solanago.PublicKey) *CreateProposalMeta {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateProposalMeta) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateProposalMeta) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateProposalMeta {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateProposalMeta) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateProposalMeta) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateProposalMeta,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateProposalMeta) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateProposalMeta) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Title == nil {
			return errors.New("Title parameter is not set")
		}
		if inst.DescriptionLink == nil {
			return errors.New("DescriptionLink parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ProposalMeta is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateProposalMeta) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateProposalMeta")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("           Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("          Title", *inst.Title))
						paramsBranch.Child(ag_format.Param("DescriptionLink", *inst.DescriptionLink))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     proposer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" proposalMeta", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateProposalMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `DescriptionLink` param:
	err = encoder.Encode(obj.DescriptionLink)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateProposalMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `DescriptionLink`:
	err = decoder.Decode(&obj.DescriptionLink)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateProposalMetaInstruction declares a new CreateProposalMeta instruction with the provided parameters and accounts.
func NewCreateProposalMetaInstruction(
	// Parameters:
	bump uint8,
	title string,
	descriptionLink string,
	// Accounts:
	proposal ag_solanago.PublicKey,
	proposer ag_solanago.PublicKey,
	proposalMeta ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateProposalMeta {
	return NewCreateProposalMetaInstructionBuilder().
		SetBump(bump).
		SetTitle(title).
		SetDescriptionLink(descriptionLink).
		SetProposalAccount(proposal).
		SetProposerAccount(proposer).
		SetProposalMetaAccount(proposalMeta).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
