// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetVote is the `setVote` instruction.
type SetVote struct {
	Side   *uint8
	Weight *uint64

	// [0] = [] governor
	//
	// [1] = [WRITE] proposal
	//
	// [2] = [WRITE] vote
	//
	// [3] = [SIGNER] electorate
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetVoteInstructionBuilder creates a new `SetVote` instruction builder.
func NewSetVoteInstructionBuilder() *SetVote {
	nd := &SetVote{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetSide sets the "side" parameter.
func (inst *SetVote) SetSide(side uint8) *SetVote {
	inst.Side = &side
	return inst
}

// SetWeight sets the "weight" parameter.
func (inst *SetVote) SetWeight(weight uint64) *SetVote {
	inst.Weight = &weight
	return inst
}

// SetGovernorAccount sets the "governor" account.
func (inst *SetVote) SetGovernorAccount(governor ag_solanago.PublicKey) *SetVote {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(governor)
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *SetVote) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
func (inst *SetVote) SetProposalAccount(proposal ag_solanago.PublicKey) *SetVote {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *SetVote) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetVoteAccount sets the "vote" account.
func (inst *SetVote) SetVoteAccount(vote ag_solanago.PublicKey) *SetVote {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(vote).WRITE()
	return inst
}

// GetVoteAccount gets the "vote" account.
func (inst *SetVote) GetVoteAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetElectorateAccount sets the "electorate" account.
func (inst *SetVote) SetElectorateAccount(electorate ag_solanago.PublicKey) *SetVote {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(electorate).SIGNER()
	return inst
}

// GetElectorateAccount gets the "electorate" account.
func (inst *SetVote) GetElectorateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst SetVote) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetVote,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetVote) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetVote) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Side == nil {
			return errors.New("Side parameter is not set")
		}
		if inst.Weight == nil {
			return errors.New("Weight parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Vote is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Electorate is not set")
		}
	}
	return nil
}

func (inst *SetVote) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetVote")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Side", *inst.Side))
						paramsBranch.Child(ag_format.Param("Weight", *inst.Weight))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  governor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      vote", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("electorate", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj SetVote) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `Weight` param:
	err = encoder.Encode(obj.Weight)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetVote) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `Weight`:
	err = decoder.Decode(&obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

// NewSetVoteInstruction declares a new SetVote instruction with the provided parameters and accounts.
func NewSetVoteInstruction(
	// Parameters:
	side uint8,
	weight uint64,
	// Accounts:
	governor ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	vote ag_solanago.PublicKey,
	electorate ag_solanago.PublicKey) *SetVote {
	return NewSetVoteInstructionBuilder().
		SetSide(side).
		SetWeight(weight).
		SetGovernorAccount(governor).
		SetProposalAccount(proposal).
		SetVoteAccount(vote).
		SetElectorateAccount(electorate)
}
