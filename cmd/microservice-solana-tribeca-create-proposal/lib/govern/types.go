// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type GovernanceParameters struct {
	VotingDelay          uint64
	VotingPeriod         uint64
	QuorumVotes          uint64
	TimelockDelaySeconds int64
}

func (obj GovernanceParameters) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VotingDelay` param:
	err = encoder.Encode(obj.VotingDelay)
	if err != nil {
		return err
	}
	// Serialize `VotingPeriod` param:
	err = encoder.Encode(obj.VotingPeriod)
	if err != nil {
		return err
	}
	// Serialize `QuorumVotes` param:
	err = encoder.Encode(obj.QuorumVotes)
	if err != nil {
		return err
	}
	// Serialize `TimelockDelaySeconds` param:
	err = encoder.Encode(obj.TimelockDelaySeconds)
	if err != nil {
		return err
	}
	return nil
}

func (obj *GovernanceParameters) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VotingDelay`:
	err = decoder.Decode(&obj.VotingDelay)
	if err != nil {
		return err
	}
	// Deserialize `VotingPeriod`:
	err = decoder.Decode(&obj.VotingPeriod)
	if err != nil {
		return err
	}
	// Deserialize `QuorumVotes`:
	err = decoder.Decode(&obj.QuorumVotes)
	if err != nil {
		return err
	}
	// Deserialize `TimelockDelaySeconds`:
	err = decoder.Decode(&obj.TimelockDelaySeconds)
	if err != nil {
		return err
	}
	return nil
}

type ProposalInstruction struct {
	ProgramId ag_solanago.PublicKey
	Keys      []ProposalAccountMeta
	Data      []byte
}

func (obj ProposalInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Keys` param:
	err = encoder.Encode(obj.Keys)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Keys`:
	err = decoder.Decode(&obj.Keys)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type ProposalAccountMeta struct {
	Pubkey     ag_solanago.PublicKey
	IsSigner   bool
	IsWritable bool
}

func (obj ProposalAccountMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Pubkey` param:
	err = encoder.Encode(obj.Pubkey)
	if err != nil {
		return err
	}
	// Serialize `IsSigner` param:
	err = encoder.Encode(obj.IsSigner)
	if err != nil {
		return err
	}
	// Serialize `IsWritable` param:
	err = encoder.Encode(obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalAccountMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Pubkey`:
	err = decoder.Decode(&obj.Pubkey)
	if err != nil {
		return err
	}
	// Deserialize `IsSigner`:
	err = decoder.Decode(&obj.IsSigner)
	if err != nil {
		return err
	}
	// Deserialize `IsWritable`:
	err = decoder.Decode(&obj.IsWritable)
	if err != nil {
		return err
	}
	return nil
}

type ProposalState ag_binary.BorshEnum

const (
	ProposalStateDraft ProposalState = iota
	ProposalStateActive
	ProposalStateCanceled
	ProposalStateDefeated
	ProposalStateSucceeded
	ProposalStateQueued
)

func (value ProposalState) String() string {
	switch value {
	case ProposalStateDraft:
		return "Draft"
	case ProposalStateActive:
		return "Active"
	case ProposalStateCanceled:
		return "Canceled"
	case ProposalStateDefeated:
		return "Defeated"
	case ProposalStateSucceeded:
		return "Succeeded"
	case ProposalStateQueued:
		return "Queued"
	default:
		return ""
	}
}

type VoteSide ag_binary.BorshEnum

const (
	VoteSidePending VoteSide = iota
	VoteSideAgainst
	VoteSideFor
	VoteSideAbstain
)

func (value VoteSide) String() string {
	switch value {
	case VoteSidePending:
		return "Pending"
	case VoteSideAgainst:
		return "Against"
	case VoteSideFor:
		return "For"
	case VoteSideAbstain:
		return "Abstain"
	default:
		return ""
	}
}
