// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateGovernor is the `createGovernor` instruction.
type CreateGovernor struct {
	Bump       *uint8
	Electorate *ag_solanago.PublicKey
	Params     *GovernanceParameters

	// [0] = [SIGNER] base
	//
	// [1] = [WRITE] governor
	//
	// [2] = [] smartWallet
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateGovernorInstructionBuilder creates a new `CreateGovernor` instruction builder.
func NewCreateGovernorInstructionBuilder() *CreateGovernor {
	nd := &CreateGovernor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateGovernor) SetBump(bump uint8) *CreateGovernor {
	inst.Bump = &bump
	return inst
}

// SetElectorate sets the "electorate" parameter.
func (inst *CreateGovernor) SetElectorate(electorate ag_solanago.PublicKey) *CreateGovernor {
	inst.Electorate = &electorate
	return inst
}

// SetParams sets the "params" parameter.
func (inst *CreateGovernor) SetParams(params GovernanceParameters) *CreateGovernor {
	inst.Params = &params
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *CreateGovernor) SetBaseAccount(base ag_solanago.PublicKey) *CreateGovernor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *CreateGovernor) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetGovernorAccount sets the "governor" account.
func (inst *CreateGovernor) SetGovernorAccount(governor ag_solanago.PublicKey) *CreateGovernor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(governor).WRITE()
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *CreateGovernor) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *CreateGovernor) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *CreateGovernor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(smartWallet)
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *CreateGovernor) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateGovernor) SetPayerAccount(payer ag_solanago.PublicKey) *CreateGovernor {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateGovernor) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateGovernor) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateGovernor {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateGovernor) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateGovernor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateGovernor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateGovernor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateGovernor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Electorate == nil {
			return errors.New("Electorate parameter is not set")
		}
		if inst.Params == nil {
			return errors.New("Params parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateGovernor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateGovernor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("      Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("Electorate", *inst.Electorate))
						paramsBranch.Child(ag_format.Param("    Params", *inst.Params))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         base", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     governor", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  smartWallet", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateGovernor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Electorate` param:
	err = encoder.Encode(obj.Electorate)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateGovernor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Electorate`:
	err = decoder.Decode(&obj.Electorate)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateGovernorInstruction declares a new CreateGovernor instruction with the provided parameters and accounts.
func NewCreateGovernorInstruction(
	// Parameters:
	bump uint8,
	electorate ag_solanago.PublicKey,
	params GovernanceParameters,
	// Accounts:
	base ag_solanago.PublicKey,
	governor ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateGovernor {
	return NewCreateGovernorInstructionBuilder().
		SetBump(bump).
		SetElectorate(electorate).
		SetParams(params).
		SetBaseAccount(base).
		SetGovernorAccount(governor).
		SetSmartWalletAccount(smartWallet).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
