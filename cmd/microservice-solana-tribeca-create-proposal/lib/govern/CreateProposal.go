// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateProposal is the `createProposal` instruction.
type CreateProposal struct {
	Bump         *uint8
	Instructions *[]ProposalInstruction

	// [0] = [WRITE] governor
	//
	// [1] = [WRITE] proposal
	//
	// [2] = [SIGNER] proposer
	//
	// [3] = [WRITE, SIGNER] payer
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateProposalInstructionBuilder creates a new `CreateProposal` instruction builder.
func NewCreateProposalInstructionBuilder() *CreateProposal {
	nd := &CreateProposal{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateProposal) SetBump(bump uint8) *CreateProposal {
	inst.Bump = &bump
	return inst
}

// SetInstructions sets the "instructions" parameter.
func (inst *CreateProposal) SetInstructions(instructions []ProposalInstruction) *CreateProposal {
	inst.Instructions = &instructions
	return inst
}

// SetGovernorAccount sets the "governor" account.
func (inst *CreateProposal) SetGovernorAccount(governor ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(governor).WRITE()
	return inst
}

// GetGovernorAccount gets the "governor" account.
func (inst *CreateProposal) GetGovernorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetProposalAccount sets the "proposal" account.
func (inst *CreateProposal) SetProposalAccount(proposal ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(proposal).WRITE()
	return inst
}

// GetProposalAccount gets the "proposal" account.
func (inst *CreateProposal) GetProposalAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProposerAccount sets the "proposer" account.
func (inst *CreateProposal) SetProposerAccount(proposer ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(proposer).SIGNER()
	return inst
}

// GetProposerAccount gets the "proposer" account.
func (inst *CreateProposal) GetProposerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateProposal) SetPayerAccount(payer ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateProposal) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateProposal) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateProposal {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateProposal) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateProposal) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateProposal,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateProposal) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateProposal) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Instructions == nil {
			return errors.New("Instructions parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Governor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Proposal is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Proposer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateProposal) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateProposal")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("Instructions", *inst.Instructions))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     governor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     proposal", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     proposer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateProposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Instructions` param:
	err = encoder.Encode(obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateProposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Instructions`:
	err = decoder.Decode(&obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateProposalInstruction declares a new CreateProposal instruction with the provided parameters and accounts.
func NewCreateProposalInstruction(
	// Parameters:
	bump uint8,
	instructions []ProposalInstruction,
	// Accounts:
	governor ag_solanago.PublicKey,
	proposal ag_solanago.PublicKey,
	proposer ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateProposal {
	return NewCreateProposalInstructionBuilder().
		SetBump(bump).
		SetInstructions(instructions).
		SetGovernorAccount(governor).
		SetProposalAccount(proposal).
		SetProposerAccount(proposer).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
