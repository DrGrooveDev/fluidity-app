// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package govern

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Governor struct {
	Base          ag_solanago.PublicKey
	Bump          uint8
	ProposalCount uint64
	Electorate    ag_solanago.PublicKey
	SmartWallet   ag_solanago.PublicKey
	Params        GovernanceParameters
}

var GovernorDiscriminator = [8]byte{37, 136, 44, 80, 68, 85, 213, 178}

func (obj Governor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(GovernorDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `ProposalCount` param:
	err = encoder.Encode(obj.ProposalCount)
	if err != nil {
		return err
	}
	// Serialize `Electorate` param:
	err = encoder.Encode(obj.Electorate)
	if err != nil {
		return err
	}
	// Serialize `SmartWallet` param:
	err = encoder.Encode(obj.SmartWallet)
	if err != nil {
		return err
	}
	// Serialize `Params` param:
	err = encoder.Encode(obj.Params)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Governor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(GovernorDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[37 136 44 80 68 85 213 178]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `ProposalCount`:
	err = decoder.Decode(&obj.ProposalCount)
	if err != nil {
		return err
	}
	// Deserialize `Electorate`:
	err = decoder.Decode(&obj.Electorate)
	if err != nil {
		return err
	}
	// Deserialize `SmartWallet`:
	err = decoder.Decode(&obj.SmartWallet)
	if err != nil {
		return err
	}
	// Deserialize `Params`:
	err = decoder.Decode(&obj.Params)
	if err != nil {
		return err
	}
	return nil
}

type Proposal struct {
	Governor          ag_solanago.PublicKey
	Index             uint64
	Bump              uint8
	Proposer          ag_solanago.PublicKey
	QuorumVotes       uint64
	ForVotes          uint64
	AgainstVotes      uint64
	AbstainVotes      uint64
	CanceledAt        int64
	CreatedAt         int64
	ActivatedAt       int64
	VotingEndsAt      int64
	QueuedAt          int64
	QueuedTransaction ag_solanago.PublicKey
	Instructions      []ProposalInstruction
}

var ProposalDiscriminator = [8]byte{26, 94, 189, 187, 116, 136, 53, 33}

func (obj Proposal) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProposalDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Governor` param:
	err = encoder.Encode(obj.Governor)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Proposer` param:
	err = encoder.Encode(obj.Proposer)
	if err != nil {
		return err
	}
	// Serialize `QuorumVotes` param:
	err = encoder.Encode(obj.QuorumVotes)
	if err != nil {
		return err
	}
	// Serialize `ForVotes` param:
	err = encoder.Encode(obj.ForVotes)
	if err != nil {
		return err
	}
	// Serialize `AgainstVotes` param:
	err = encoder.Encode(obj.AgainstVotes)
	if err != nil {
		return err
	}
	// Serialize `AbstainVotes` param:
	err = encoder.Encode(obj.AbstainVotes)
	if err != nil {
		return err
	}
	// Serialize `CanceledAt` param:
	err = encoder.Encode(obj.CanceledAt)
	if err != nil {
		return err
	}
	// Serialize `CreatedAt` param:
	err = encoder.Encode(obj.CreatedAt)
	if err != nil {
		return err
	}
	// Serialize `ActivatedAt` param:
	err = encoder.Encode(obj.ActivatedAt)
	if err != nil {
		return err
	}
	// Serialize `VotingEndsAt` param:
	err = encoder.Encode(obj.VotingEndsAt)
	if err != nil {
		return err
	}
	// Serialize `QueuedAt` param:
	err = encoder.Encode(obj.QueuedAt)
	if err != nil {
		return err
	}
	// Serialize `QueuedTransaction` param:
	err = encoder.Encode(obj.QueuedTransaction)
	if err != nil {
		return err
	}
	// Serialize `Instructions` param:
	err = encoder.Encode(obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Proposal) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProposalDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[26 94 189 187 116 136 53 33]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Governor`:
	err = decoder.Decode(&obj.Governor)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Proposer`:
	err = decoder.Decode(&obj.Proposer)
	if err != nil {
		return err
	}
	// Deserialize `QuorumVotes`:
	err = decoder.Decode(&obj.QuorumVotes)
	if err != nil {
		return err
	}
	// Deserialize `ForVotes`:
	err = decoder.Decode(&obj.ForVotes)
	if err != nil {
		return err
	}
	// Deserialize `AgainstVotes`:
	err = decoder.Decode(&obj.AgainstVotes)
	if err != nil {
		return err
	}
	// Deserialize `AbstainVotes`:
	err = decoder.Decode(&obj.AbstainVotes)
	if err != nil {
		return err
	}
	// Deserialize `CanceledAt`:
	err = decoder.Decode(&obj.CanceledAt)
	if err != nil {
		return err
	}
	// Deserialize `CreatedAt`:
	err = decoder.Decode(&obj.CreatedAt)
	if err != nil {
		return err
	}
	// Deserialize `ActivatedAt`:
	err = decoder.Decode(&obj.ActivatedAt)
	if err != nil {
		return err
	}
	// Deserialize `VotingEndsAt`:
	err = decoder.Decode(&obj.VotingEndsAt)
	if err != nil {
		return err
	}
	// Deserialize `QueuedAt`:
	err = decoder.Decode(&obj.QueuedAt)
	if err != nil {
		return err
	}
	// Deserialize `QueuedTransaction`:
	err = decoder.Decode(&obj.QueuedTransaction)
	if err != nil {
		return err
	}
	// Deserialize `Instructions`:
	err = decoder.Decode(&obj.Instructions)
	if err != nil {
		return err
	}
	return nil
}

type ProposalMeta struct {
	Proposal        ag_solanago.PublicKey
	Title           string
	DescriptionLink string
}

var ProposalMetaDiscriminator = [8]byte{50, 100, 46, 24, 151, 174, 216, 78}

func (obj ProposalMeta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ProposalMetaDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Proposal` param:
	err = encoder.Encode(obj.Proposal)
	if err != nil {
		return err
	}
	// Serialize `Title` param:
	err = encoder.Encode(obj.Title)
	if err != nil {
		return err
	}
	// Serialize `DescriptionLink` param:
	err = encoder.Encode(obj.DescriptionLink)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProposalMeta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ProposalMetaDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[50 100 46 24 151 174 216 78]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Proposal`:
	err = decoder.Decode(&obj.Proposal)
	if err != nil {
		return err
	}
	// Deserialize `Title`:
	err = decoder.Decode(&obj.Title)
	if err != nil {
		return err
	}
	// Deserialize `DescriptionLink`:
	err = decoder.Decode(&obj.DescriptionLink)
	if err != nil {
		return err
	}
	return nil
}

type Vote struct {
	Proposal ag_solanago.PublicKey
	Voter    ag_solanago.PublicKey
	Bump     uint8
	Side     uint8
	Weight   uint64
}

var VoteDiscriminator = [8]byte{96, 91, 104, 57, 145, 35, 172, 155}

func (obj Vote) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VoteDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Proposal` param:
	err = encoder.Encode(obj.Proposal)
	if err != nil {
		return err
	}
	// Serialize `Voter` param:
	err = encoder.Encode(obj.Voter)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `Weight` param:
	err = encoder.Encode(obj.Weight)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Vote) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VoteDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[96 91 104 57 145 35 172 155]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Proposal`:
	err = decoder.Decode(&obj.Proposal)
	if err != nil {
		return err
	}
	// Deserialize `Voter`:
	err = decoder.Decode(&obj.Voter)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `Weight`:
	err = decoder.Decode(&obj.Weight)
	if err != nil {
		return err
	}
	return nil
}
