schema {
  query: query_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar network_blockchain

"""
Boolean expression to compare columns of type "network_blockchain". All fields are combined with logical 'AND'.
"""
input network_blockchain_comparison_exp {
  _eq: network_blockchain
  _gt: network_blockchain
  _gte: network_blockchain
  _in: [network_blockchain!]
  _is_null: Boolean
  _lt: network_blockchain
  _lte: network_blockchain
  _neq: network_blockchain
  _nin: [network_blockchain!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "tvl"
  """
  tvl(
    """
    distinct select on columns
    """
    distinct_on: [tvl_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tvl_order_by!]

    """
    filter the rows returned
    """
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch aggregated fields from the table: "tvl"
  """
  tvl_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [tvl_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tvl_order_by!]

    """
    filter the rows returned
    """
    where: tvl_bool_exp
  ): tvl_aggregate!

  """
  fetch data from the table: "user_actions"
  """
  user_actions(
    """
    distinct select on columns
    """
    distinct_on: [user_actions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_actions_order_by!]

    """
    filter the rows returned
    """
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch aggregated fields from the table: "user_actions"
  """
  user_actions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_actions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_actions_order_by!]

    """
    filter the rows returned
    """
    where: user_actions_bool_exp
  ): user_actions_aggregate!

  """
  fetch data from the table: "winners"
  """
  winners(
    """
    distinct select on columns
    """
    distinct_on: [winners_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [winners_order_by!]

    """
    filter the rows returned
    """
    where: winners_bool_exp
  ): [winners!]!

  """
  fetch aggregated fields from the table: "winners"
  """
  winners_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [winners_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [winners_order_by!]

    """
    filter the rows returned
    """
    where: winners_bool_exp
  ): winners_aggregate!
}

type subscription_root {
  """
  fetch data from the table: "tvl"
  """
  tvl(
    """
    distinct select on columns
    """
    distinct_on: [tvl_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tvl_order_by!]

    """
    filter the rows returned
    """
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch aggregated fields from the table: "tvl"
  """
  tvl_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [tvl_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [tvl_order_by!]

    """
    filter the rows returned
    """
    where: tvl_bool_exp
  ): tvl_aggregate!

  """
  fetch data from the table in a streaming manner : "tvl"
  """
  tvl_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [tvl_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: tvl_bool_exp
  ): [tvl!]!

  """
  fetch data from the table: "user_actions"
  """
  user_actions(
    """
    distinct select on columns
    """
    distinct_on: [user_actions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_actions_order_by!]

    """
    filter the rows returned
    """
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch aggregated fields from the table: "user_actions"
  """
  user_actions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_actions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_actions_order_by!]

    """
    filter the rows returned
    """
    where: user_actions_bool_exp
  ): user_actions_aggregate!

  """
  fetch data from the table in a streaming manner : "user_actions"
  """
  user_actions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_actions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_actions_bool_exp
  ): [user_actions!]!

  """
  fetch data from the table: "winners"
  """
  winners(
    """
    distinct select on columns
    """
    distinct_on: [winners_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [winners_order_by!]

    """
    filter the rows returned
    """
    where: winners_bool_exp
  ): [winners!]!

  """
  fetch aggregated fields from the table: "winners"
  """
  winners_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [winners_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [winners_order_by!]

    """
    filter the rows returned
    """
    where: winners_bool_exp
  ): winners_aggregate!

  """
  fetch data from the table in a streaming manner : "winners"
  """
  winners_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [winners_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: winners_bool_exp
  ): [winners!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "tvl"
"""
type tvl {
  contract_address: String!
  network: network_blockchain!
  time: timestamp
  tvl: numeric!
}

"""
aggregated selection of "tvl"
"""
type tvl_aggregate {
  aggregate: tvl_aggregate_fields
  nodes: [tvl!]!
}

"""
aggregate fields of "tvl"
"""
type tvl_aggregate_fields {
  avg: tvl_avg_fields
  count(columns: [tvl_select_column!], distinct: Boolean): Int!
  max: tvl_max_fields
  min: tvl_min_fields
  stddev: tvl_stddev_fields
  stddev_pop: tvl_stddev_pop_fields
  stddev_samp: tvl_stddev_samp_fields
  sum: tvl_sum_fields
  var_pop: tvl_var_pop_fields
  var_samp: tvl_var_samp_fields
  variance: tvl_variance_fields
}

"""
aggregate avg on columns
"""
type tvl_avg_fields {
  tvl: Float
}

"""
Boolean expression to filter rows from the table "tvl". All fields are combined with a logical 'AND'.
"""
input tvl_bool_exp {
  _and: [tvl_bool_exp!]
  _not: tvl_bool_exp
  _or: [tvl_bool_exp!]
  contract_address: String_comparison_exp
  network: network_blockchain_comparison_exp
  time: timestamp_comparison_exp
  tvl: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type tvl_max_fields {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""
aggregate min on columns
"""
type tvl_min_fields {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""
Ordering options when selecting data from "tvl".
"""
input tvl_order_by {
  contract_address: order_by
  network: order_by
  time: order_by
  tvl: order_by
}

"""
select columns of table "tvl"
"""
enum tvl_select_column {
  """
  column name
  """
  contract_address

  """
  column name
  """
  network

  """
  column name
  """
  time

  """
  column name
  """
  tvl
}

"""
aggregate stddev on columns
"""
type tvl_stddev_fields {
  tvl: Float
}

"""
aggregate stddev_pop on columns
"""
type tvl_stddev_pop_fields {
  tvl: Float
}

"""
aggregate stddev_samp on columns
"""
type tvl_stddev_samp_fields {
  tvl: Float
}

"""
Streaming cursor of the table "tvl"
"""
input tvl_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: tvl_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input tvl_stream_cursor_value_input {
  contract_address: String
  network: network_blockchain
  time: timestamp
  tvl: numeric
}

"""
aggregate sum on columns
"""
type tvl_sum_fields {
  tvl: numeric
}

"""
aggregate var_pop on columns
"""
type tvl_var_pop_fields {
  tvl: Float
}

"""
aggregate var_samp on columns
"""
type tvl_var_samp_fields {
  tvl: Float
}

"""
aggregate variance on columns
"""
type tvl_variance_fields {
  tvl: Float
}

scalar user_action

"""
Boolean expression to compare columns of type "user_action". All fields are combined with logical 'AND'.
"""
input user_action_comparison_exp {
  _eq: user_action
  _gt: user_action
  _gte: user_action
  _in: [user_action!]
  _is_null: Boolean
  _lt: user_action
  _lte: user_action
  _neq: user_action
  _nin: [user_action!]
}

"""
columns and relationships of "user_actions"
"""
type user_actions {
  amount: numeric!
  event_number: bigint!
  network: network_blockchain!
  recipient_address: String
  sender_address: String!
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  swap_in: Boolean
  time: timestamp
  token_decimals: Int!
  token_short_name: String!
  transaction_hash: String!
  type: user_action!
}

"""
aggregated selection of "user_actions"
"""
type user_actions_aggregate {
  aggregate: user_actions_aggregate_fields
  nodes: [user_actions!]!
}

"""
aggregate fields of "user_actions"
"""
type user_actions_aggregate_fields {
  avg: user_actions_avg_fields
  count(columns: [user_actions_select_column!], distinct: Boolean): Int!
  max: user_actions_max_fields
  min: user_actions_min_fields
  stddev: user_actions_stddev_fields
  stddev_pop: user_actions_stddev_pop_fields
  stddev_samp: user_actions_stddev_samp_fields
  sum: user_actions_sum_fields
  var_pop: user_actions_var_pop_fields
  var_samp: user_actions_var_samp_fields
  variance: user_actions_variance_fields
}

"""
aggregate avg on columns
"""
type user_actions_avg_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
Boolean expression to filter rows from the table "user_actions". All fields are combined with a logical 'AND'.
"""
input user_actions_bool_exp {
  _and: [user_actions_bool_exp!]
  _not: user_actions_bool_exp
  _or: [user_actions_bool_exp!]
  amount: numeric_comparison_exp
  event_number: bigint_comparison_exp
  network: network_blockchain_comparison_exp
  recipient_address: String_comparison_exp
  sender_address: String_comparison_exp
  solana_recipient_owner_address: String_comparison_exp
  solana_sender_owner_address: String_comparison_exp
  swap_in: Boolean_comparison_exp
  time: timestamp_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  type: user_action_comparison_exp
}

"""
aggregate max on columns
"""
type user_actions_max_fields {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""
aggregate min on columns
"""
type user_actions_min_fields {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""
Ordering options when selecting data from "user_actions".
"""
input user_actions_order_by {
  amount: order_by
  event_number: order_by
  network: order_by
  recipient_address: order_by
  sender_address: order_by
  solana_recipient_owner_address: order_by
  solana_sender_owner_address: order_by
  swap_in: order_by
  time: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  type: order_by
}

"""
select columns of table "user_actions"
"""
enum user_actions_select_column {
  """
  column name
  """
  amount

  """
  column name
  """
  event_number

  """
  column name
  """
  network

  """
  column name
  """
  recipient_address

  """
  column name
  """
  sender_address

  """
  column name
  """
  solana_recipient_owner_address

  """
  column name
  """
  solana_sender_owner_address

  """
  column name
  """
  swap_in

  """
  column name
  """
  time

  """
  column name
  """
  token_decimals

  """
  column name
  """
  token_short_name

  """
  column name
  """
  transaction_hash

  """
  column name
  """
  type
}

"""
aggregate stddev on columns
"""
type user_actions_stddev_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
aggregate stddev_pop on columns
"""
type user_actions_stddev_pop_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
aggregate stddev_samp on columns
"""
type user_actions_stddev_samp_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
Streaming cursor of the table "user_actions"
"""
input user_actions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_actions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_actions_stream_cursor_value_input {
  amount: numeric
  event_number: bigint
  network: network_blockchain
  recipient_address: String
  sender_address: String
  solana_recipient_owner_address: String
  solana_sender_owner_address: String
  swap_in: Boolean
  time: timestamp
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  type: user_action
}

"""
aggregate sum on columns
"""
type user_actions_sum_fields {
  amount: numeric
  event_number: bigint
  token_decimals: Int
}

"""
aggregate var_pop on columns
"""
type user_actions_var_pop_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
aggregate var_samp on columns
"""
type user_actions_var_samp_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
aggregate variance on columns
"""
type user_actions_variance_fields {
  amount: Float
  event_number: Float
  token_decimals: Float
}

"""
columns and relationships of "winners"
"""
type winners {
  awarded_time: timestamp!
  created: timestamp
  network: network_blockchain!
  solana_winning_owner_address: String
  token_decimals: Int!
  token_short_name: String!
  transaction_hash: String!
  winning_address: String!
  winning_amount: numeric!
}

"""
aggregated selection of "winners"
"""
type winners_aggregate {
  aggregate: winners_aggregate_fields
  nodes: [winners!]!
}

"""
aggregate fields of "winners"
"""
type winners_aggregate_fields {
  avg: winners_avg_fields
  count(columns: [winners_select_column!], distinct: Boolean): Int!
  max: winners_max_fields
  min: winners_min_fields
  stddev: winners_stddev_fields
  stddev_pop: winners_stddev_pop_fields
  stddev_samp: winners_stddev_samp_fields
  sum: winners_sum_fields
  var_pop: winners_var_pop_fields
  var_samp: winners_var_samp_fields
  variance: winners_variance_fields
}

"""
aggregate avg on columns
"""
type winners_avg_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
Boolean expression to filter rows from the table "winners". All fields are combined with a logical 'AND'.
"""
input winners_bool_exp {
  _and: [winners_bool_exp!]
  _not: winners_bool_exp
  _or: [winners_bool_exp!]
  awarded_time: timestamp_comparison_exp
  created: timestamp_comparison_exp
  network: network_blockchain_comparison_exp
  solana_winning_owner_address: String_comparison_exp
  token_decimals: Int_comparison_exp
  token_short_name: String_comparison_exp
  transaction_hash: String_comparison_exp
  winning_address: String_comparison_exp
  winning_amount: numeric_comparison_exp
}

"""
aggregate max on columns
"""
type winners_max_fields {
  awarded_time: timestamp
  created: timestamp
  network: network_blockchain
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""
aggregate min on columns
"""
type winners_min_fields {
  awarded_time: timestamp
  created: timestamp
  network: network_blockchain
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""
Ordering options when selecting data from "winners".
"""
input winners_order_by {
  awarded_time: order_by
  created: order_by
  network: order_by
  solana_winning_owner_address: order_by
  token_decimals: order_by
  token_short_name: order_by
  transaction_hash: order_by
  winning_address: order_by
  winning_amount: order_by
}

"""
select columns of table "winners"
"""
enum winners_select_column {
  """
  column name
  """
  awarded_time

  """
  column name
  """
  created

  """
  column name
  """
  network

  """
  column name
  """
  solana_winning_owner_address

  """
  column name
  """
  token_decimals

  """
  column name
  """
  token_short_name

  """
  column name
  """
  transaction_hash

  """
  column name
  """
  winning_address

  """
  column name
  """
  winning_amount
}

"""
aggregate stddev on columns
"""
type winners_stddev_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
aggregate stddev_pop on columns
"""
type winners_stddev_pop_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
aggregate stddev_samp on columns
"""
type winners_stddev_samp_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
Streaming cursor of the table "winners"
"""
input winners_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: winners_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input winners_stream_cursor_value_input {
  awarded_time: timestamp
  created: timestamp
  network: network_blockchain
  solana_winning_owner_address: String
  token_decimals: Int
  token_short_name: String
  transaction_hash: String
  winning_address: String
  winning_amount: numeric
}

"""
aggregate sum on columns
"""
type winners_sum_fields {
  token_decimals: Int
  winning_amount: numeric
}

"""
aggregate var_pop on columns
"""
type winners_var_pop_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
aggregate var_samp on columns
"""
type winners_var_samp_fields {
  token_decimals: Float
  winning_amount: Float
}

"""
aggregate variance on columns
"""
type winners_variance_fields {
  token_decimals: Float
  winning_amount: Float
}
