# fluidity.money
# This action builds a docker image, tags it with the branch name & latest, then pushes it to an ECR repository
name: "üõ† + üöö + üõ©Ô∏è Docker Build & Publish & Deploy"
# fluidity.money
# This action builds a docker image, tags it with the branch name & latest, then pushes it to an ECR repository
on:
  # Repository dispatch allows commits to fluidity-money/go-docker to trigger this workflow to run
  # Comment this out if
  # the repository does not use fluidity/go-docker as a base image
  # the repository require automatic rebuilds
  repository_dispatch:
    types: [go-docker-dispatch]
  # Run on all pushes, on all branches
  push:
    branches:
      - develop
    tags:
      - develop*

env:
  SLACK_COLOR_GREEN: "#14E91C"
  SLACK_COLOR_YELLOW: "#FCF819"
  SLACK_COLOR_RED: "#DE1A1F"

jobs:
  publish:
    name: "üõ† + üöö + üõ©Ô∏è Docker Build & Publish & Deploy"
    runs-on: ubuntu-latest
    if: contains(toJson(github.event.commits), '[skip-ci]') == false && contains(toJson(github.event.commits), '[skip ci]') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[ci-skip]') == false
    steps:
      - name: Configure environment
        id: config
        run: |
          VERSION=$(echo $GITHUB_REF | sed -e "s/^refs\/tags\/v//")
          echo ::set-output name=version::$VERSION

      - name: Fetch repository
        uses: actions/checkout@master
        with:
          token: ${{ secrets.PAT }}
          lfs: true
          submodules: true

      - name: Load .env file
        uses: xom9ikk/dotenv@v1.0.2
        with:
          path: .github/env
          mode: develop

      - name: Generate Branch Variables
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=TAG::${GITHUB_REF##*/}
          echo ::set-output name=AUTHOR::$(git log -1 --pretty=format:'%an')
          echo ::set-output name=BRANCH::$(git rev-parse --abbrev-ref HEAD)

      # If this workflow was triggered by a pull request (open or synchronize!) then resolve the commit message from HEAD^2
      # It is stored in output steps, to be referenced with ${{ steps.pr_get_commit_message.outputs.pr_commit_message }}
      - name: ECR Repository Variables
        id: ecr_repo
        run: |
          REPO_NAME=$(echo "${{github.repository}}" | sed 's/fluidity-money/fluidity/')
          echo "::set-output name=REPO_NAME::$REPO_NAME"

      - name: Slack Notification # https://github.com/bryannice/gitactions-slack-notification/blob/master/deployment/git-actions/template_slack_notification.yml
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "üõ† ${{ github.repository }} is building image ${{ steps.ecr_repo.outputs.REPO_NAME }}"
          SLACK_MESSAGE: "üë∑‚Äç‚ôÇÔ∏è Commit: ${{ github.sha }}/${{ steps.get_version.outputs.VERSION }} on ${{ github.ref }} from ${{ github.repository }}"
          SLACK_COLOR: ${{ env.SLACK_COLOR_YELLOW }}
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_NOTIFICATIONS }}

      - name: Build & Publish
        id: docker
        uses: fluidity-money/aws-ecr-action@master
        with: # These are injested as arguments in fluidity-money/aws-ecr-action in entrypoint.sh
          access_key_id: ${{ secrets.ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.ACCESS_KEY }}
          account_id: ${{ secrets.ACCOUNT_ID }}
          repo: ${{ steps.ecr_repo.outputs.REPO_NAME }}
          region: ap-southeast-2
          tags: latest,develop,${{ steps.branch_name.outputs.TAG }}
          create_repo: true
          image_scanning_configuration: true
          set_repo_policy: false
          prebuild_script: ${{ env.PREBUILD_SCRIPT }}
          ecr_image: ${{ env.ECR_IMAGE }}
          make_docker: ${{ env.MAKE_DOCKER }}
          make_docker_command: ${{ env.MAKE_DOCKER_COMMAND }} # replace the 'docker' in make docker with docker-frontend
          make_env_vars: "${{ env.MAKE_ENV_VARS }}"

      - name: Slack Succesful Build Notification
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "‚úÖ ${{ github.repository }}"
          SLACK_MESSAGE: "üòÑ ECR image: ${{steps.ecr_repo.outputs.REPO_NAME}}"
          SLACK_COLOR: ${{ env.SLACK_COLOR_GREEN }}
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_SUCCESS }}

  publish-failure:
    name: "‚ùå Slack Build Failure Notification"
    runs-on: ubuntu-latest
    if: ${{ always() && needs.publish.result=='failure' }}
    needs: publish
    steps:
      - name: Configure environment
        id: config
        run: |
          VERSION=$(echo $GITHUB_REF | sed -e "s/^refs\/tags\/v//")
          echo ::set-output name=version::$VERSION

      - name: Fetch repository
        uses: actions/checkout@master
        with:
          token: ${{ secrets.PAT }}
          lfs: true
          submodules: true

      - name: Generate Branch Variables
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          echo ::set-output name=TAG::${GITHUB_REF##*/}
          echo ::set-output name=AUTHOR::$(git log -1 --pretty=format:'%an')
          echo ::set-output name=BRANCH::$(git rev-parse --abbrev-ref HEAD)

      - name: Slack build failure notification
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_COLOR: ${{ env.SLACK_COLOR_RED }}
          SLACK_TITLE: "‚ùå ${{ github.repository }} docker build failure"
          SLACK_MESSAGE: "üò≠ ${{ github.repository }} failed to build on commit:${{ github.sha }} by ${{ steps.branch_name.outputs.AUTHOR }}"
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_FAILURE }}

  deploy-check:
    name: "Deploy check"
    runs-on: ubuntu-latest
    needs: publish
    if: always() && needs.publish.result=='success' 
    steps: 
      - name: Force redeployment in ECS
        run: |
          if [ -z "${{ secrets.ECS_DEV_CLUSTER }}"]; then 
            echo "ECS Cluster Cluster Not Set"
            exit 1
          fi
          if [ -z "${{ secrets.ECS_DEV_SERVICE }}"]; then 
            echo "ECS Service Secret Not Set"
            exit 1
          fi

  deploy:
    name: "üíø + üõ©Ô∏è Deploy Image"
    runs-on: ubuntu-latest
    needs: 
      - deploy-check
      - publish
    if: always() && needs.publish.result=='success' && needs.deploy-check.result=='success'
    steps:
      - name: Slack ECS Deployment
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "üîµ üü† ${{ secrets.ECS_DEV_CLUSTER }} deploying ${{ github.repository }}"
          SLACK_MESSAGE: "üõ´ Starting Deployment of ECR image: ${{steps.ecr_repo.outputs.REPO_NAME}} into ECS Cluster: ${{ secrets.ECS_DEV_CLUSTER }}"
          SLACK_COLOR: ${{ env.SLACK_COLOR_GREEN }}
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_DEPLOYMENT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Force redeployment in ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_DEV_CLUSTER }} --service ${{ secrets.ECS_DEV_SERVICE }} --force-new-deployment

      - name: Slack ECS Deployment
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "üîµ üü¢ ECS Deployment ${{ github.repository }} success! "
          SLACK_MESSAGE: "üõ¨ Finished Deployment of ECR image: ${{steps.ecr_repo.outputs.REPO_NAME}} into ECS Cluster: ${{ secrets.ECS_DEV_CLUSTER }}"
          SLACK_COLOR: ${{ env.SLACK_COLOR_GREEN }}
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_DEPLOYMENT }}

  deploy-failure:
    name: "‚ùå Slack Build Failure Notification"
    runs-on: ubuntu-latest
    if: ${{ always() && needs.deploy.result=='failure' }}
    needs: deploy
    steps:
      - name: Slack deploy failure
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "‚ùå ${{ github.repository }} deployment failure"
          SLACK_MESSAGE: "üò≠ ${{ github.repository }} failed to deploy"
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_DEPLOYMENT }}
          SLACK_COLOR: ${{ env.SLACK_COLOR_RED }}