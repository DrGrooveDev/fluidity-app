name: "üßê Semgrep"

on:
  pull_request: {}

  # Scan all files on branches, block on any issues
  push: 
     #branches: "*"

  # Schedule this job to run at a certain time, using cron syntax
  # Note that * is a special character in YAML so you have to quote this string
  # schedule:
  #   - cron: '30 0 1,15 * *' # scheduled for 00:30 UTC on both the 1st and 15th of the month

jobs:
  semgrep:
    name: "üßê Semgrep Scan"
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && contains(toJson(github.event.commits), '[skip-ci]') == false && contains(toJson(github.event.commits), '[skip ci]') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[ci-skip]') == false
    steps:
      # Fetch project source
      - uses: actions/checkout@v2

      - uses: returntocorp/semgrep-action@v1
        with:
          config: >- # more at semgrep.dev/explore
            p/security-audit
            p/secrets
            r/go.lang.security.audit.crypto.math_random.math-random-used
            s/killgallic:golang-check-unsafe-returns

        # == Optional settings in the `with:` block

        # Instead of `config:`, use rules set in Semgrep App.
        # Get your token from semgrep.dev/manage/settings.
        #   publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

        # Never fail the build due to findings on pushes.
        # Instead, just collect findings for semgrep.dev/manage/findings
        #   auditOn: push

        # Upload findings to GitHub Advanced Security Dashboard [step 1/2]
        # See also the next step.
        #   generateSarif: "1"

        # Change job timeout (default is 1800 seconds; set to 0 to disable)
        # env:
        #   SEMGREP_TIMEOUT: 300

      # Upload findings to GitHub Advanced Security Dashboard [step 2/2]
      # - name: Upload SARIF file for GitHub Advanced Security Dashboard
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: semgrep.sarif
      #   if: always()
      
  failure:
    name: "‚ùå Slack Build Failure Notification"
    runs-on: ubuntu-latest
    if: ${{ always() && needs.semgrep.result=='failure' }}
    needs: semgrep
    steps:
      - name: Slack semgrep failure result notification
        uses: bryannice/gitactions-slack-notification@2.0.0
        env:
          SLACK_TITLE: "‚ùå ${{ github.repository }} contains anti-patterns. "
          SLACK_MESSAGE: "üßê Static analysis has indicated ${{ github.repository }} contains anti patterns."
          SLACK_COLOR: "#DE1A1F"
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_INCOMING_WEBHOOK_FAILURE }}