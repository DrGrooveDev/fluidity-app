// Test the staking implementation. Should not be run in parallel, since
// it uses snapshotting/reverts to rollback.

import * as ethers from "ethers";
import { BigNumber } from "ethers";
import type { BigNumberish } from "ethers";

import * as hre from "hardhat";

import { expect, assert } from "chai";

import { getLatestTimestamp } from "../script-utils";
import { advanceTime, sendEmptyTransaction } from "./test-utils";

const { MaxUint256 } = ethers.constants;

const SevenDays = BigNumber.from(604800);

const stakingTests = [
  // FLY, Seconds, Bonus, Points
  [1353023, 423673200, 1, 583059283.8083999],
  [9506203, 1674583200, 0, 15918927839.5896],
  [4501770, 298580400, 0, 1344140287.3079998],
  [8842763, 2524914000, 1, 22391393334.1308],
  [299845, 145580400, 0, 43651555.037999995],
  [8888777, 2617491600, 0, 23266299131.773197],
  [6714135, 2289124800, 1, 15418221445.224],
  [9701871, 2999073600, 1, 29167037485.675198],
  [3622651, 1335114000, 1, 4862943819.1116],
  [1883677, 2943673200, 1, 5558600476.5515995],
  [3238975, 1739746800, 0, 5634996391.53],
  [8638177, 3216110400, 1, 27844023320.135994],
  [16436, 176796000, 1, 3025104.9696],
  [5611768, 3568644000, 1, 20067130170.0288],
  [9218623, 1930377600, 1, 17862328420.3296],
  [1074267, 3203337600, 0, 3441239873.5391994],
  [9759984, 2527347600, 1, 24737706198.316795],
  [6489619, 3360744000, 0, 21809948116.536],
  [3444640, 3263288400, 1, 11265853573.439999],
  [4277727, 3545845200, 1, 15199203781.3356],
  [2333532, 1249030800, 0, 2914653340.7855997],
  [9931800, 3068413200, 1, 30546947251.44],
  [3222737, 3498886800, 1, 11299381285.222801],
  [8364083, 1011747600, 0, 8462340901.450799],
  [6755631, 2810181600, 0, 18984549932.5896],
  [5292227, 1113404400, 0, 5892388827.5988],
  [4842487, 2770966800, 1, 13453515540.0828],
  [9274689, 3248838000, 1, 30199274044.2684],
  [541589, 3305559600, 0, 1790254718.2044],
  [5609821, 210103200, 1, 1219355180.4168],
  [6133594, 438372000, 1, 2733311040.7824],
  [6782593, 1286902800, 1, 8777763269.9172],
  [2449261, 2664453600, 1, 6543718045.4232],
  [8491681, 2950531200, 0, 25054969730.9472],
  [9936336, 2375132400, 1, 23672227523.039997],
  [8496671, 3301416000, 0, 28051045586.135998],
  [703392, 2888949600, 1, 2037168974.8224],
  [1419925, 1952175600, 1, 2782248186.5099998],
  [7223658, 1639000800, 0, 11839581240.9264],
  [517412, 920293200, 0, 476170745.19839996],
  [7754861, 3329157600, 1, 25873436114.2872],
  [9451849, 2068218000, 0, 19548484235.081997],
  [4284670, 902682000, 0, 3867694484.94],
  [605437, 705132000, 0, 426913002.684],
  [9752198, 624938400, 0, 6094523014.6032],
  [9499938, 1934334000, 0, 18376053071.292],
  [8843493, 1728914400, 0, 15289642393.999197],
  [5379843, 2247519600, 1, 12130347335.9796],
  [3957211, 761385600, 0, 3012963471.5616],
  [6118036, 2542312800, 0, 15553961233.6608],
  [9804144, 2358903600, 0, 23127030576.5184],
  [6568417, 2796188400, 1, 18414202364.982],
  [517098, 446781600, 0, 231029871.7968],
  [6125809, 1990137600, 0, 12191202821.3184],
  [8756528, 2570670000, 1, 22573695211.3728],
  [4990038, 3394735200, 1, 16976073347.7264],
  [6974156, 1607263200, 0, 11209304289.8592],
  [2712569, 1092344400, 0, 2963059556.7636],
  [1119849, 1047690000, 1, 1181382014.9124],
  [6844055, 944740800, 0, 6465857995.944],
  [6571780, 2901297600, 1, 19114384892.255997],
  [7510665, 129607200, 0, 973436260.788],
  [5688588, 1620140400, 1, 9257596734.024],
  [2353005, 3352564800, 1, 7905678906.312],
  [756029, 1326150000, 1, 1008094814.4203999],
  [1187217, 1759435200, 0, 2088831379.8384],
  [34227, 1118170800, 0, 38271631.9716],
  [710010, 2379916800, 0, 1689764727.1679997],
  [6795935, 3140748000, 1, 21393641437.236],
  [8535814, 103579200, 1, 946082309.1552],
  [2328268, 2555424000, 1, 5966609563.4688],
  [5500325, 275850000, 1, 1557183809.97],
  [8879373, 3420306000, 1, 30434615685.622795],
  [1647939, 2465506800, 0, 4063004810.4851995],
  [6441952, 1375124400, 0, 8858485378.8288],
  [8563635, 472957200, 0, 4050232831.422],
  [864372, 2778908400, 1, 2408283877.752],
  [7520110, 2949577200, 0, 22181144997.492],
  [707161, 1509735600, 0, 1067626136.6315999],
  [545972, 1179997200, 0, 644245431.2784001],
  [1626888, 1522587600, 1, 2488886797.7376],
  [5680637, 2628738000, 1, 14974134137.197199],
  [210197, 3003526800, 1, 632857848.5268],
  [9810748, 3368278800, 1, 33116536985.2272],
  [4143534, 2443615200, 0, 10125202664.1168],
  [6756895, 1820307600, 0, 12299627320.902],
  [2897676, 2519258400, 0, 7299994603.478399],
  [9863630, 3574360800, 1, 35327758698.79199],
  [9821003, 3335583600, 1, 32830053453.723595],
  [4066602, 545734800, 0, 2219286229.1495996],
  [4936316, 3453490800, 1, 17083347698.8944],
  [2965687, 1823425200, 1, 5429232181.0836],
  [8775559, 3359880000, 0, 29484825172.92],
  [6116926, 84668400, 0, 517910337.33839995],
  [5155748, 2909926800, 0, 15002849279.2464],
  [8581419, 2812237200, 0, 24132985740.5868],
  [7689198, 2465193600, 0, 18955361698.7328],
  [340451, 2311286400, 1, 789350623.344],
  [7599527, 2174576400, 1, 16580906392.517998],
  [7858941, 2341249200, 1, 18456776379.298798],
  [5651433, 1419879600, 1, 8065370267.607599],
  [295207, 571546800, 0, 168724616.1876],
  [3222817, 480754800, 1, 1572774658.9308],
  [2141966, 304189200, 0, 651562923.9672],
  [5090602, 512370000, 0, 2608271746.74],
  [1787033, 1307527200, 0, 2336594254.7976],
  [6856472, 1108447200, 1, 7649798721.4656],
  [1237151, 3014262000, 1, 3738075994.6596],
  [4547750, 3297247200, 1, 15028061704.199999],
  [9537792, 1358560800, 1, 13026891808.9728],
  [4645398, 1978948800, 0, 9193004797.6224],
  [7620810, 3238768800, 0, 24682041658.728],
  [2807464, 1114682400, 1, 3149806160.16],
  [8236214, 841442400, 0, 6930299675.073601],
  [4197330, 2458818000, 0, 10320470555.94],
  [3562625, 592340400, 0, 2110286717.5499997],
  [2392943, 1923926400, 0, 4603846211.3952],
  [4404619, 3340440000, 1, 14745332455.2144],
  [7184238, 2640538800, 0, 18970259187.4344],
  [3516162, 320220000, 0, 1125945395.64],
  [6435550, 1699002000, 1, 10980718968.78],
  [3415250, 681249600, 0, 2326637696.4],
  [4180926, 2934007200, 1, 12297210475.204798],
  [9615802, 717512400, 0, 6899457170.9448],
  [8463533, 909007200, 1, 7754837371.5384],
  [5406263, 81176400, 1, 478097462.142],
  [733108, 2876896800, 1, 2114396663.8752],
  [4334446, 346280400, 1, 1532391369.9479997],
  [8989211, 627638400, 0, 5641974009.3024],
  [6805346, 115797600, 0, 788042733.9696],
  [6872036, 1157864400, 0, 7956885839.9184],
  [8205174, 843069600, 1, 6977082632.932799],
  [8084449, 3230690400, 0, 26118351773.5896],
  [7384630, 744573600, 1, 5551995234.455999],
  [2118730, 167659200, 1, 370601471.664],
  [5789639, 2125000800, 1, 12345006390.717598],
  [447096, 933300000, 0, 417274696.8],
  [6509488, 2227629600, 1, 14547971409.7536],
  [5558171, 1062410400, 0, 5905058675.3784],
  [5382697, 1669294800, 0, 8985308112.0756],
  [8479933, 1892948400, 1, 16113619566.198],
  [1752843, 991249200, 0, 1737504221.4756],
  [1060146, 1756656000, 1, 1870005947.3856],
  [3797278, 824515200, 0, 3130913429.6256],
  [8814619, 2099894400, 0, 18509769076.2336],
  [4988632, 1889186400, 1, 9460661224.608002],
  [5207056, 1417003200, 0, 7378415014.5792],
  [2244534, 3565584000, 1, 8019364447.814399],
  [8196142, 1113354000, 0, 9125207480.268],
  [6634128, 1672610400, 0, 11096311487.7312],
  [4074469, 1692367200, 0, 6895497693.016799],
  [4585256, 2673018000, 1, 12289749776.5536],
  [1349219, 697345200, 1, 950663485.2132],
  [8013731, 1060491600, 0, 8498494410.1596],
  [5569390, 3074997600, 0, 17125860883.463999],
  [7670608, 1846886400, 0, 14166741594.9312],
  [6745088, 2990271600, 1, 20218598236.5696],
  [415817, 1729663200, 0, 719223362.8343999],
  [7762712, 3574450800, 0, 27747432118.5696],
  [2429462, 688262400, 1, 1689739410.24],
  [3146835, 395557200, 1, 1267591711.158],
  [1966572, 3314131200, 0, 6517477622.2464],
  [9956324, 2700100800, 0, 26883078397.4592],
  [9928648, 575805600, 0, 5716971118.828799],
  [8621496, 2115003600, 0, 18234495077.3856],
  [9740629, 1596830400, 0, 15554132502.3216],
  [4949325, 3518485200, 1, 17450046983.61],
  [3894150, 2380078800, 0, 9268383859.019999],
  [2972767, 3309868800, 1, 9861043896.748798],
  [6174484, 2198970000, 1, 13622317016.5584],
  [5592403, 3377548800, 0, 18888614041.7664],
  [7666855, 851724000, 0, 6530044408.0199995],
  [5274796, 2000854800, 1, 10592383255.070398],
  [2696026, 3372962400, 1, 9113161005.72],
  [5487319, 2853262800, 0, 15656763174.433199],
  [2378151, 1579989600, 0, 3757453847.2296],
  [3343724, 159728400, 0, 534087684.56159997],
  [5704510, 458611200, 1, 2657553228.288],
  [8630903, 25772400, 1, 285078726.09000003],
  [367691, 1664946000, 0, 612185659.686],
  [5604779, 315532800, 0, 1768491611.2512],
  [3640434, 1507021200, 1, 5512632028.9992],
  [50769, 1052870400, 1, 53821638.432],
  [1316290, 605336400, 0, 796798249.956],
  [7253308, 1521061200, 1, 11085366978.5904],
  [231103, 711684000, 0, 164472307.452],
  [3396313, 111466800, 1, 403225223.13719994],
  [4051333, 2283256800, 0, 9250233621.3144],
  [787628, 203875200, 0, 160577816.0256],
  [27102, 1873098000, 0, 50764701.99599999],
  [2206011, 3447878400, 1, 7622068022.495999],
  [5758903, 3441178800, 1, 19859210729.2692],
  [5472841, 1676095200, 1, 9212722221.3048],
  [4136077, 2825913600, 1, 11718214237.3824],
  [8395775, 810694800, 0, 6806411134.47],
  [5229824, 1328198400, 0, 6946243869.0816],
  [5415879, 3346718400, 0, 18125421901.4736],
  [3155803, 1295344800, 1, 4110756561.7271996],
  [5439018, 1468004400, 0, 7984502355.6792],
  [7998847, 996166800, 0, 7968185819.6796],
  [8478146, 1594785600, 1, 13582356147.907198],
  [5575456, 3544182000, 0, 19760430796.992],
  [9230089, 1082844000, 0, 9994746493.116],
  [8768412, 2475187200, 1, 21767098773.657597],
  [7581868, 1430938800, 1, 10904215262.8752],
  [4220536, 649972800, 0, 2743233601.4208],
  [6716835, 3001730400, 0, 20162127811.284],
  [2049640, 2792988000, 1, 5739495391.584001],
  [9298611, 1308124800, 1, 12231229253.8464],
  [5148994, 989661600, 1, 5133130979.2848],
  [4745542, 1074373200, 1, 5132924389.8935995],
  [8422464, 515235600, 1, 4400680167.244801],
  [846844, 3322882800, 0, 2813963361.8831997],
  [9905135, 362451600, 0, 3590132028.966],
  [344358, 2090872800, 0, 720008775.6624],
  [7577874, 319413600, 1, 2475473193.0288],
  [4920494, 2865654000, 0, 14100433313.075998],
  [4475858, 3092972400, 1, 13876189247.339998],
  [334242, 1478905200, 1, 496738026.5976],
  [4567855, 2811132000, 1, 12873995026.307999],
  [7462484, 1695632400, 0, 12653629654.8816],
  [3774790, 1909202400, 1, 7234234043.4],
  [5917867, 2420748000, 0, 14325664704.515999],
  [2346509, 1386014400, 1, 3269325287.4479995],
  [3227980, 1335600, 1, 27738677.735999998],
  [3407950, 1062522000, 1, 3645755387.82],
  [4267825, 1256626800, 1, 5394037439.43],
  [4402314, 768157200, 1, 3413619429.8472],
  [2464914, 14587200, 1, 53845553.3472],
  [9491915, 3244935600, 1, 30869541417.977997],
  [7125699, 676083600, 0, 4817568232.4364],
  [8400532, 1597471200, 0, 13419607934.6784],
  [8926616, 2648340000, 1, 23705500025.7216],
  [1527383, 2853424800, 1, 4369357666.1592],
  [5921598, 448768800, 0, 2657428428.5424],
  [5335531, 3413829600, 1, 18253316809.303196],
  [3738779, 160596000, 1, 627567514.7543999],
  [4229497, 867528000, 0, 3669207073.4159994],
  [9836802, 3249288000, 0, 31962602696.975994],
  [9965532, 1604433600, 0, 15989034382.6752],
  [5127663, 55346400, 0, 283797687.46320003],
  [9555439, 2335226400, 1, 22383462970.475998],
  [5849523, 686174400, 0, 4013792934.8111997],
  [1320443, 213364800, 1, 291319303.7232],
  [3125492, 541148400, 1, 1714038565.752],
  [1848609, 384919200, 0, 711565097.3928],
  [994732, 211784400, 1, 217888086.744],
  [9208105, 220316400, 0, 2028696544.422],
  [4017195, 2292109200, 1, 9237004812.126],
  [7823773, 1732377600, 0, 13553729092.684801],
  [5435196, 2184933600, 0, 11875542362.9856],
  [5291079, 2108005200, 0, 11153622045.6108],
  [2887793, 2957716800, 1, 8562232317.4992],
  [8542503, 2631250800, 0, 22477467852.7524],
  [5854951, 3436236000, 1, 20161486296.813602],
  [8679896, 3065814000, 1, 26673941888.553596],
  [4081825, 1738789200, 1, 7127057479.410001],
  [4736961, 1040943600, 0, 4930909236.3996],
  [3566766, 1409410800, 1, 5052924682.394401],
  [5839714, 2421946800, 1, 14185858943.541601],
  [2325299, 2456175600, 0, 5711342666.504399],
  [296141, 720460800, 0, 213357981.7728],
  [8871839, 3146947200, 0, 27919208899.9008],
  [3770503, 799113600, 1, 3040425028.7136],
  [3516268, 2951197200, 1, 10402719942.6864],
  [7848181, 484542000, 0, 3802773318.1019998],
  [5369770, 518788800, 1, 2824748177.3279996],
  [8554162, 1645401600, 0, 14075031841.4592],
  [13015, 1357592400, 0, 17669065.086],
  [6403643, 333954000, 1, 2184997273.8588],
  [3113277, 1827511200, 1, 5712143505.3576],
  [969653, 1401559200, 0, 1359026082.9575999],
  [9028510, 546645600, 1, 5000920580.231999],
  [4418085, 2513743200, 0, 11105931125.772],
  [7992662, 1729188000, 0, 13820815218.456],
  [9197550, 710769600, 0, 6537338934.48],
  [7245088, 1521104400, 0, 11020535235.1872],
  [5012384, 3362619600, 1, 16891118559.2448],
  [1068970, 2322810000, 1, 2490772362.3719997],
  [9837075, 119826000, 1, 1250130904.4699998],
  [9128236, 818341200, 0, 7470011602.123199],
  [8803839, 1552676400, 1, 13733407786.626],
  [7004993, 2364026400, 0, 16559988383.815199],
  [6888920, 2128719600, 0, 14664579026.831999],
  [996616, 2079097200, 0, 2072061535.0751998],
  [3503502, 2491362000, 1, 8753918765.8392],
  [1469686, 996962400, 0, 1465221681.8063998],
  [7367151, 3092090400, 0, 22779896882.450397],
  [3605802, 3337740000, 0, 12035229567.48],
  [2354995, 391456800, 0, 921878806.7159998],
  [929082, 2256105600, 0, 2096107103.0591998],
  [6669887, 971128800, 1, 6525726730.336801],
  [7922364, 799344000, 1, 6390191478.1824],
  [5775500, 3481768800, 0, 20108955704.4],
  [9828161, 3114295200, 0, 30607794627.127197],
  [9849579, 488124000, 0, 4807815899.7960005],
  [8413317, 2725239600, 1, 22989365145.2124],
  [1331120, 2010657600, 1, 2686087281.0239997],
  [5667138, 2135336400, 0, 12101246055.2232],
  [4389070, 1268942400, 0, 5569477019.567999],
  [8361193, 1384574400, 0, 11576693781.259201],
  [6195194, 126756000, 1, 830240250.6384001],
  [634673, 1726318800, 1, 1100254134.5172],
  [9505897, 705758400, 1, 6777856655.351999],
  [4020850, 2199103200, 1, 8871445822.68],
  [7714585, 2382832800, 1, 18438555548.484],
  [3118318, 3487154400, 0, 10874056334.2992],
  [5139377, 2540930400, 1, 13096098798.876],
  [2463630, 3144002400, 1, 7763538673.799999],
  [9199156, 499482000, 1, 4661576631.7776],
  [8090457, 1739822400, 0, 14075958314.836798],
  [2766378, 2201720400, 0, 6090790876.7112],
  [6193583, 1273626000, 1, 7933258889.938799],
  [4612685, 2965147200, 1, 13710767034.888],
  [8620048, 203230800, 0, 1751859251.0783997],
  [9855440, 968770800, 1, 9619189334.496],
  [1517118, 2332234800, 1, 3549286030.9031997],
  [591017, 117039600, 0, 69172393.2732],
  [3214816, 2442247200, 0, 7851375374.5152],
  [6446445, 667036800, 1, 4346801763.408],
  [1476383, 1966863600, 1, 2914558979.6196],
  [7308577, 1010044800, 1, 7435032922.684799],
  [3502074, 814766400, 0, 2853372225.5136],
  [7394143, 2351019600, 1, 17437438850.4396],
  [4975880, 4161600, 1, 56820568.896],
  [2556741, 2464412400, 0, 6300864223.9883995],
  [9916863, 3561660000, 0, 35320494272.579994],
  [6031033, 2216332800, 1, 13410547080.8832],
  [3873278, 536684400, 1, 2106838581.8760002],
  [5223396, 649904400, 1, 3432617362.152],
  [1760804, 3476736000, 1, 6134629866.8544],
  [7191109, 3074241600, 0, 22107206437.9344],
  [1481486, 272750400, 1, 414827931.888],
  [249532, 2303856000, 1, 576696798.8352],
  [9710848, 988837200, 0, 9602447745.9456],
  [5187676, 1972245600, 1, 10269021242.5632],
  [4985127, 1112702400, 1, 5583142834.92],
  [9517542, 203130000, 0, 1933298306.4599998],
  [5513065, 991094400, 0, 5463967848.336],
  [4733525, 1618743600, 1, 7696717330.2300005],
  [8401499, 1575226800, 1, 13295241104.1156],
  [9610272, 48484800, 1, 535699625.9328],
  [6165068, 201834000, 1, 1289063932.2287998],
  [2962601, 523587600, 1, 1572682520.3652],
  [599672, 797644800, 1, 482677432.0128],
  [9033393, 3057534000, 1, 27685466985.8988],
  [9633232, 1958544000, 1, 18937022878.771202],
  [8347335, 990561600, 1, 8329131131.832],
  [465039, 762008400, 0, 354363624.3276],
  [7342245, 3265549200, 1, 24029749363.266],
  [287176, 926514000, 1, 268156793.0016],
  [7879256, 1308751200, 0, 10311985745.1072],
  [6426137, 1166558400, 0, 7496464096.9008],
  [8449841, 786434400, 1, 6706571202.972],
  [8456117, 3204910800, 1, 27162471814.1028],
  [7890284, 1699218000, 1, 13464577123.070398],
  [6967727, 300348000, 0, 2092742868.996],
  [1467675, 2430604800, 1, 3577989697.9199996],
  [4086931, 435034800, 1, 1807618520.6244],
  [2831757, 2791944000, 1, 7926658725.2112],
  [7262148, 3020940000, 1, 21991219144.444798],
  [9520492, 906372000, 0, 8629107375.023998],
  [6317036, 1884873600, 1, 11952660907.1232],
  [3318731, 2097723600, 0, 6961780340.751599],
  [2407046, 2841951600, 0, 6840708230.973599],
  [7530203, 1062154800, 1, 8052892462.717199],
  [912731, 2976112800, 0, 2716390412.0568],
  [5211072, 1698692400, 0, 8852008402.2528],
  [9388239, 3526776000, 0, 33110215987.464],
  [4895535, 2344554000, 0, 11477846166.39],
  [9714530, 3454520400, 0, 33559042061.412],
  [2083036, 2493723600, 0, 5194516032.8496],
  [6821516, 735220800, 0, 5015320450.7328],
  [7238578, 3183422400, 1, 23095986053.039997],
  [3102946, 2904958800, 0, 9013930288.6248],
  [8115221, 3045585600, 1, 24774497246.3472],
  [7157032, 2365016400, 0, 16926498055.3248],
  [7435332, 437630400, 1, 3307889982.816],
  [6598497, 663843600, 0, 4380370003.0692],
  [8860702, 3517851600, 1, 31234942138.6584],
  [307959, 2786032800, 0, 857983875.0552],
  [641, 1595246400, 0, 1022552.9423999999],
  [8992043, 1341453600, 1, 12127669104.981598],
  [6519562, 1952798400, 0, 12731390242.300798],
  [2945490, 2757967200, 0, 8123564807.9279995],
  [2987781, 16110000, 1, 69817271.2956],
  [2213730, 3353144400, 1, 7439022719.459999],
  [6784866, 654166800, 0, 4438434079.6488],
  [3174450, 482479200, 1, 1554644984.7599998],
  [2507881, 1679130000, 0, 4211058223.5299997],
  [1085450, 3010032000, 1, 3275116996.32],
  [2335994, 841953600, 1, 1983752267.9327998],
  [8276244, 3263198400, 0, 27007026178.8096],
  [1398039, 1673449200, 0, 2339547246.1188],
  [5710386, 2968887600, 1, 16994937884.0472],
  [1548457, 2006485200, 0, 3106956053.3364],
  [2667997, 3352266000, 1, 8963198886.2292],
  [9504507, 3231590400, 0, 30714673577.9328],
  [8405315, 3382682400, 1, 28493513531.100002],
  [6581526, 2117062800, 0, 13933503861.832798],
  [5510528, 2874110400, 1, 15877859042.303999],
  [3270285, 949726800, 1, 3129611728.554],
  [5608072, 2174475600, 1, 12235316870.3904],
  [1525780, 1714104000, 1, 2626419102.048],
  [2005403, 2684491200, 0, 5383486705.9536],
  [9850872, 489088800, 0, 4817951165.433599],
  [914363, 2333581200, 1, 2140376387.6843996],
  [6434683, 2544170400, 0, 16370930021.9832],
  [1100265, 1584748800, 0, 1743643638.4320002],
  [9733208, 184921200, 0, 1799876503.2096],
  [7191769, 1191762000, 0, 8570877006.978],
  [5247215, 1647349200, 0, 8643995432.477999],
  [2311903, 2720181600, 1, 6305574868.7976],
  [5954676, 2011176000, 1, 12019118115.5136],
  [2036317, 2123265600, 1, 4338420611.0543995],
  [1156905, 832118400, 0, 962681937.5519999],
  [3626865, 420418800, 1, 1551124566.486],
  [7944582, 1750442400, 1, 13964191781.4],
  [659922, 3212665200, 0, 2120108444.1144],
  [8780564, 1668178800, 1, 14711276538.1296],
  [1178342, 267544800, 1, 323811209.6208],
  [700164, 1365818400, 0, 956296874.2176],
  [7420841, 742388400, 0, 5509146276.6444],
  [3821217, 536684400, 0, 2050787552.9148],
  [9182299, 2204107200, 1, 20305412791.6752],
  [8898575, 2431396800, 0, 21635966779.559998],
  [9161556, 2173122000, 0, 19909178897.831997],
  [6278695, 3461940000, 0, 21736465368.3],
  [796599, 1096891200, 1, 879563829.9311999],
  [7910159, 2957788800, 1, 23453988466.377598],
  [8446113, 3003447600, 1, 25428756328.887604],
  [9905111, 1231160400, 1, 12266667754.397999],
  [3318966, 1880370000, 0, 6240884097.419999],
  [7023747, 3341437200, 0, 23469409509.188396],
  [627857, 3032388000, 0, 1903906032.516],
  [417383, 1479445200, 0, 617495275.9116],
  [3075421, 707320800, 0, 2175309242.0568],
  [3397858, 1597496400, 1, 5452726216.932],
  [6663815, 58759200, 1, 439923742.092],
  [6280523, 61423200, 1, 431351344.0584],
  [5162671, 2416863600, 0, 12477471618.675598],
  [4452158, 2823274800, 1, 12601977468.9192],
  [7827611, 2107245600, 1, 16551508507.855198],
  [4430938, 2705731200, 0, 11988927191.865599],
  [2733948, 246790800, 1, 694555115.0832],
  [3920985, 917416800, 1, 3625634452.284],
  [5203240, 368546400, 0, 1917635370.336],
  [3713267, 94741200, 0, 351799371.50039995],
  [4181149, 2428887600, 0, 10155540959.8524],
  [4866585, 899971200, 1, 4415106069.647999],
  [2111078, 1087106400, 0, 2294966404.6992],
  [4650605, 918414000, 0, 4271180740.47],
  [2206894, 401436000, 1, 901943453.6783999],
  [1679914, 792464400, 0, 1331272040.0616],
  [9431846, 3306175200, 1, 31251787900.9488],
  [8562383, 2335834800, 1, 20062454533.189198],
  [1794339, 2057806800, 1, 3705425590.4315996],
  [7821009, 1363669200, 1, 10722030841.1412],
  [7110454, 1073311200, 0, 7631729915.2848],
  [8678239, 2754190800, 0, 23901526014.001198],
  [4626991, 3436988400, 1, 15936495243.785997],
  [9413555, 3410168400, 0, 32101807792.661995],
  [5247137, 1707069600, 0, 8957228059.735199],
  [6895380, 614300400, 1, 4285878602.0399995],
  [1066614, 3333744000, 1, 3563559080.5824],
  [9815933, 1621404000, 1, 15986833145.272799],
  [6826600, 2754079200, 0, 18800997066.72],
  [8126150, 282610800, 1, 2355514098.6599994],
  [5740382, 2136261600, 0, 12262957635.931198],
  [952168, 2435832000, 1, 2326231738.2527995],
  [6258719, 246272400, 1, 1586773028.07],
  [7958558, 2227744800, 1, 17787396230.5392],
  [7749753, 88902000, 0, 688968541.206],
  [1293158, 2165313600, 0, 2800092604.3488],
  [5790967, 2132046000, 0, 12346608028.481998],
  [6658136, 362138400, 1, 2459488805.856],
  [9280140, 355798800, 0, 3301862675.832],
  [1464587, 3556249200, 1, 5219065733.6916],
  [7651827, 1824246000, 0, 13958814797.442],
  [5518056, 819406800, 1, 4561580452.4064],
  [1981707, 1337878800, 1, 2665666219.8348],
  [8367309, 651927600, 0, 5454879674.8284],
  [5186238, 3519237600, 0, 18251603772.1488],
  [1242032, 1827025200, 0, 2269223763.2064],
  [4411667, 1484856000, 1, 6582708329.3712],
  [8614502, 732772800, 0, 6312472751.1456],
  [2990840, 3239956800, 1, 9711898716.096],
  [3711880, 2902262400, 1, 10799789097.6],
  [8079977, 2602904400, 1, 21090048926.274],
  [2304530, 3167852400, 1, 7317136248.299999],
  [2237503, 3079303200, 0, 6889950147.909599],
  [9949309, 806029200, 0, 8019433573.8228],
  [4148078, 2105190000, 1, 8762597415.7128],
  [9469629, 3315110400, 0, 31392865582.0416],
  [3554230, 3305433600, 0, 11748271264.128],
  [2020167, 953992800, 1, 1941886336.8167999],
  [7192487, 3597760800, 0, 25876847783.1096],
  [6235004, 1458936000, 1, 9141722960.774399],
  [5037391, 259722000, 1, 1344880634.2236],
  [6310660, 2452892400, 1, 15525170199.0],
  [4974527, 3481390800, 0, 17318272532.1516],
  [7869825, 891550800, 0, 7016348774.61],
  [5008283, 380761200, 1, 1943307959.7203999],
  [3547479, 3254634000, 0, 11545745767.686],
  [4719126, 842464800, 0, 3975697541.7648],
  [9304397, 325134000, 0, 3025175814.198],
  [7600649, 2230945200, 0, 16956631403.4348],
  [7363551, 3566430000, 1, 26315030900.667595],
  [2329353, 416048400, 1, 986029101.0179999],
  [3368427, 2744992800, 1, 9270754558.1208],
  [1009306, 674532000, 1, 688134334.0176],
  [3542063, 2814188400, 0, 9968032606.669199],
  [5815273, 1770213600, 1, 10336480277.6376],
  [6005317, 2565709200, 1, 15451481264.4756],
  [8649542, 2024067600, 0, 17507257717.0392],
  [9034484, 3541075200, 1, 32057355908.275196],
  [6135085, 2635801200, 1, 16215390397.998001],
  [4979348, 3005038800, 0, 14963133938.7024],
  [5965420, 2656594800, 0, 15847703751.816],
  [3893969, 2631452400, 0, 10246794070.5756],
  [4142818, 1310720400, 0, 5430076066.0872],
  [8773046, 635148000, 0, 5572182620.808],
  [3073658, 3335486400, 0, 10252144457.2512],
  [336903, 1356796800, 1, 459554019.52320004],
  [271712, 111236400, 1, 32196241.728],
  [7010147, 2181398400, 0, 15291923449.5648],
  [29038, 2090934000, 1, 60927287.6808],
  [8485190, 921952800, 1, 7884526793.976],
  [6208593, 1306598400, 0, 8112137680.0512],
  [741074, 1816560000, 0, 1346205385.44],
  [9902126, 1275505200, 0, 12630213204.055199],
  [6207182, 3173194800, 0, 19696597645.0536],
  [3792019, 1755626400, 1, 6684889622.7960005],
  [4395724, 1408521600, 0, 6191472201.638399],
  [8330459, 146044800, 0, 1216620218.5632],
  [5773420, 15904800, 0, 91825090.416],
  [2793236, 1612562400, 0, 4504267347.9264],
  [9249446, 836427600, 1, 7803620698.3991995],
  [9292562, 1261425600, 0, 11721875596.3872],
  [6642180, 177476400, 0, 1178830194.552],
  [1767030, 930063600, 0, 1643450283.1079998],
  [9819648, 1642917600, 0, 16132872525.004799],
  [6851526, 1164549600, 0, 7978941862.6896],
  [8981846, 2330863200, 1, 21000640954.996796],
  [1756265, 2592075600, 1, 4565117922.498],
  [2876935, 179884800, 0, 517516877.088],
  [6229291, 2095131600, 0, 13051184419.6956],
  [3632292, 968443200, 1, 3544030210.2335997],
  [4584196, 2090502000, 0, 9583270906.391998],
  [5194094, 1947218400, 0, 10114035408.129599],
  [8816710, 719607600, 0, 6344571522.995999],
  [6260240, 737445600, 1, 4662020760.768],
  [2062665, 667454400, 0, 1376734829.976],
  [1231980, 2566418400, 1, 3170717358.4799995],
  [3462462, 799102800, 0, 2766863079.0936],
  [2622098, 2367403200, 1, 6226593334.3584],
  [2292439, 2141686800, 0, 4909686346.1052],
  [8161253, 3310257600, 1, 27075080878.5456],
  [5179583, 928411200, 1, 4846374210.1104],
  [1236650, 1219892400, 0, 1508579936.46],
  [9385903, 2991502800, 1, 28146074234.641197],
  [7210301, 3415248000, 1, 24677295550.1856],
  [490555, 1099551600, 1, 542950787.1060001],
  [2338017, 820443600, 1, 1935179476.5203998],
  [3131794, 2657736000, 1, 8346210966.518399],
  [1738316, 238129200, 1, 426559800.62880003],
  [1016716, 2327446800, 1, 2373731318.7504],
  [1776753, 1034013600, 1, 1850081728.4136],
  [2103399, 1515999600, 0, 3188752042.6404],
  [4413147, 2104754400, 1, 9320619421.764],
  [6011859, 2447060400, 0, 14711382089.283598],
  [2100967, 2273947200, 1, 4792736005.0416],
  [1048993, 1818799200, 1, 1915520800.8023999],
  [6916061, 2696868000, 0, 18651703596.948],
  [222858, 2469121200, 1, 551880826.6104001],
  [9970770, 2243973600, 1, 22446508512.024002],
  [3929055, 944287200, 1, 3738671854.164],
  [9708683, 2847672000, 0, 27647144735.975998],
  [2462655, 1689062400, 0, 4159577964.6719995],
  [6406619, 2049343200, 0, 13129361082.6408],
  [5655504, 1392519600, 0, 7875400167.8784],
  [700532, 2071998000, 0, 1451500902.9359999],
  [2349786, 3453602400, 1, 8132280375.96],
  [8293102, 1663920000, 0, 13799058279.839998],
  [1717165, 2619522000, 1, 4510613991.834],
  [4634317, 3189337200, 1, 14814033623.751598],
  [4402802, 3501410400, 0, 15416016711.940798],
  [6650659, 1952809200, 0, 12987468081.2628],
  [250882, 718329600, 0, 180215966.7072],
  [6750834, 739749600, 1, 5042921604.0048],
  [222997, 3520911600, 0, 785152724.0652],
  [6656149, 815547600, 1, 5476714009.1748],
  [6776497, 3056670000, 1, 20762696189.617203],
  [850129, 3360931200, 1, 2863394976.3552],
  [102241, 2934385200, 1, 300756501.5148],
  [791675, 1702184400, 0, 1347576834.8700001],
  [3583872, 1512187200, 0, 5419485364.8384],
  [9750912, 75664800, 0, 737800806.2975999],
  [2760001, 1634508000, 1, 4531274697.765599],
  [8879491, 1061510400, 1, 9490115837.088],
  [296097, 2606374800, 0, 771739759.1556],
  [6179441, 2244531600, 0, 13869950594.8356],
  [2911695, 2897586000, 1, 8458018585.901999],
  [6152536, 2692958400, 1, 16613176147.776],
  [6215213, 473432400, 1, 2987590736.97],
  [28426, 3351736800, 1, 95482774.8144],
  [4513667, 2741781600, 0, 12375489129.1272],
  [9110127, 1657256400, 1, 15163933933.278002],
  [82418, 2099912400, 1, 173668737.05999997],
  [1653260, 567342000, 1, 949962534.696],
  [7922605, 2181729600, 0, 17284981837.607998],
  [1390920, 681973200, 1, 958664904.336],
  [1756329, 1452960000, 1, 2564622517.1904],
  [7820018, 1169690400, 0, 9146999982.427198],
  [5049846, 113792400, 1, 611283858.3],
  [2338480, 2910546000, 0, 6806253610.08],
  [510357, 2944929600, 0, 1502965435.8672],
  [6261732, 835228800, 1, 5275424050.444799],
  [4365841, 2338257600, 0, 10208460898.6416],
  [2265570, 1305716400, 0, 2958191904.348],
  [5520943, 2497068000, 1, 13826238891.0408],
  [5639229, 326811600, 1, 1883892720.6467998],
  [4984023, 3401532000, 1, 16989485768.560799],
  [559174, 152121600, 0, 85062443.55839999],
  [2709422, 1868238000, 1, 5081509039.5432],
  [8405029, 2467526400, 1, 20800631288.736],
  [5735117, 931600800, 1, 5384462770.4328],
  [4811923, 233089200, 0, 1121607282.5316],
  [663442, 1218675600, 1, 813335574.0744],
  [65716, 1332007200, 1, 88011125.59679998],
  [4230273, 2758658400, 0, 11669878145.743198],
  [7972223, 3381904800, 1, 27019158436.015198],
  [5973725, 2661469200, 0, 15898885096.77],
  [183237, 2436091200, 1, 447711904.0655999],
  [9445873, 2824077600, 1, 26744432719.629597],
  [8967557, 335815200, 0, 3011441947.4663997],
  [9100649, 119898000, 1, 1157198483.9843998],
  [3212792, 3417454800, 0, 10979571441.8016],
  [9338945, 3042266400, 1, 28479336912.179996],
  [7174136, 1621040400, 1, 11681631300.528],
  [2767819, 2704377600, 0, 7485227704.454399],
  [6845485, 3144898800, 0, 21528357561.918],
  [98573, 2119233600, 1, 209614617.0576],
  [9106163, 2982506400, 1, 27225278315.532],
  [275811, 3437229600, 1, 950027459.1191999],
  [7868184, 2817619200, 0, 22169546307.5328],
  [4918574, 1012017600, 0, 4977683454.9024],
  [1128941, 2857366800, 0, 3225798532.5587997],
  [7797548, 1339243200, 0, 10442813135.6736],
  [533470, 3339997200, 1, 1785660018.156],
  [2359110, 1123398000, 1, 2667340932.516],
  [8372299, 1327413600, 1, 11174266353.0888],
  [1575597, 583696800, 0, 919670926.9896],
  [2996159, 2803950000, 0, 8401080028.05],
  [6561436, 2748538800, 0, 18034361429.7168],
  [8862110, 1697166000, 1, 15104789429.795998],
  [7688061, 980658000, 0, 7539358524.138],
  [7345330, 2765847600, 1, 20369372818.716],
  [3181565, 2132082000, 0, 6783357468.33],
  [5896353, 3053055600, 1, 18044686917.759598],
  [4305221, 3591867600, 0, 15463783820.7396],
  [4764444, 730065600, 0, 3478356667.5264],
  [3522648, 2152026000, 1, 7606396054.972799],
  [8773821, 76298400, 0, 669428504.1863999],
  [8159193, 3547972800, 0, 28948594833.9504],
  [13057, 2805609600, 1, 36727607.03039999],
  [5169008, 3402208800, 0, 17586044504.8704],
  [467302, 2378444400, 1, 1114843316.004],
  [5458250, 659044800, 0, 3597231279.6],
  [7345710, 3036038400, 1, 22355169860.16],
  [9751380, 2084011200, 0, 20321985135.455997],
  [4694974, 1424332800, 1, 6721279706.6496],
  [7615309, 2707524000, 0, 20618631884.916],
  [4021122, 2832613200, 0, 11390283256.0104],
  [1198233, 2543947200, 0, 3048241485.2976],
  [3806108, 2833441200, 0, 10784383218.8496],
  [8653740, 1015059600, 0, 8784061862.904],
  [3942903, 2363767200, 0, 9320104784.181599],
  [6405947, 3557862000, 1, 22837967206.2612],
  [3769180, 2996251200, 0, 11293410098.016],
  [4727520, 2516450400, 1, 11930880044.160002],
  [1659710, 2066104800, 1, 3441180308.904],
  [7475409, 1279310400, 1, 9617622006.312],
  [6896229, 3383589600, 0, 23334008723.6184],
  [6591051, 2673871200, 1, 17671456658.368797],
  [7728769, 3455762400, 1, 26764881622.38],
  [2644972, 2229814800, 1, 5916993859.9728],
  [9760951, 2957497200, 1, 28938826329.8148],
  [9907312, 623145600, 0, 6173697880.627199],
  [2194991, 1516129200, 0, 3327889948.8371997],
  [3818310, 901015200, 1, 3468067114.968],
  [3663219, 1707292800, 1, 6280773601.7376],
  [2519995, 1029999600, 1, 2613882957.7139997],
  [4456666, 86943600, 1, 419823285.19920003],
  [2499863, 976568400, 1, 2459430215.838],
  [8764479, 3080426400, 1, 27061941576.636],
  [6298826, 94158000, 0, 593084858.508],
  [2067786, 2043439200, 1, 4240402133.2848],
  [7065399, 3260156400, 0, 23034305768.4036],
  [6353835, 762912000, 1, 4893530560.416],
  [495120, 2720534400, 1, 1350584375.04],
  [9621802, 2061655200, 0, 19836838126.6704],
  [1776389, 834429600, 0, 1482271562.7144],
  [147670, 676238400, 1, 100931854.32],
  [8482305, 1432972800, 0, 12154912346.304],
  [9044529, 180849600, 0, 1635699451.8384],
  [8179416, 2890299600, 0, 23640962793.0336],
  [9618345, 331448400, 0, 3187985060.898],
  [1447115, 3499884000, 0, 5064734634.66],
  [6830573, 483786000, 0, 3304535589.378],
  [5838984, 1541660400, 1, 9044107419.312],
  [3501479, 868550400, 1, 3066623320.0319996],
  [1345341, 428652000, 1, 586447057.1736],
  [6200086, 153309600, 0, 950532704.6256],
  [4848340, 3494203200, 1, 16976272455.071999],
  [4778977, 1696413600, 0, 8107121576.887198],
  [7343948, 1606215600, 1, 11849263280.1936],
  [2411764, 472572000, 1, 1157235755.4143999],
  [9894819, 571496400, 1, 5726666075.526],
  [9802582, 558324000, 0, 5473016792.568],
  [7791520, 3447111600, 1, 26914786709.183994],
  [1256280, 706521600, 1, 896706533.3759999],
  [8995408, 1294264800, 1, 11707725009.139198],
  [6221724, 3542205600, 1, 22083780378.5568],
  [4031093, 3537781200, 1, 14290381091.408401],
  [5066627, 1666166400, 1, 8478615220.848],
  [7254603, 2986070400, 0, 21662755282.051197],
  [695335, 2077142400, 1, 1449356273.9999998],
  [3101853, 950209200, 1, 2969921265.9803996],
  [1228175, 2953670400, 1, 3636537746.4],
  [9445253, 2205309600, 1, 20898256983.5016],
  [2565093, 1137420000, 1, 2936204499.0168],
  [9949869, 1062172800, 0, 10568480215.3632],
  [3912943, 924102000, 0, 3615958452.186],
  [5212744, 1117105200, 1, 5861015439.523199],
  [204314, 3403317600, 1, 696828261.4128],
  [1904555, 1787558400, 1, 3418325786.88],
  [7566725, 1894644000, 1, 14391166384.26],
  [6529930, 897346800, 1, 5907003409.691999],
  [3198407, 2890476000, 0, 9244918671.732],
  [9469952, 2279066400, 1, 21651378536.447998],
  [2570709, 397526400, 1, 1040581871.856],
  [9704724, 3479065200, 0, 33763367544.004795],
  [6557471, 2303913600, 0, 15107846618.5056],
  [1752950, 1913252400, 0, 3353835794.58],
  [8846353, 1844593200, 1, 16382125880.132399],
  [7334386, 804830400, 0, 5902936818.134399],
  [1179162, 1286575200, 1, 1525638472.1136],
  [6283287, 1871722800, 1, 11806173120.574799],
  [465459, 3546320400, 0, 1650666747.0635998],
  [6989398, 535676400, 1, 3794781813.732],
  [4165216, 177670800, 0, 740037258.8928],
  [1179463, 1390114800, 1, 1648149043.0212],
  [4934873, 2874830400, 1, 14222738254.824],
  [9999620, 2178619200, 0, 21785364124.704],
  [5498426, 1929927600, 0, 10611564093.9576],
  [9898351, 2541081600, 1, 25224355868.659203],
  [1440670, 2902496400, 1, 4191995295.18],
  [5770998, 616417200, 1, 3599226023.4503994],
  [2600321, 1038189600, 0, 2699626218.8615994],
  [9154394, 3128266800, 0, 28637386824.3192],
  [3371409, 318535200, 0, 1073912440.0967999],
  [7879854, 254743200, 0, 2007339223.4928],
  [7902905, 8643600, 0, 68309549.65799999],
  [9344588, 2965096800, 0, 27707607976.1184],
  [420927, 2261847600, 1, 955127644.5203999],
  [25591, 525409200, 1, 13631476.078799998],
  [4541954, 982684800, 1, 4496272843.449599],
  [7316420, 1462269600, 1, 10751678196.624],
  [6007687, 1207310400, 1, 7296744384.216],
  [2983411, 2201155200, 1, 6588603040.0608],
  [5913742, 2134378800, 1, 12665085127.4088],
  [8746968, 499287600, 1, 4430734654.9536],
  [4955743, 3357010800, 1, 16672449573.4212],
  [4975554, 938379600, 1, 4705068953.0088],
  [5277781, 433764000, 1, 2327615421.0696],
  [2902119, 2857359600, 0, 8292397584.9924],
  [845440, 2231182800, 1, 1892467051.776],
  [7195749, 87955200, 1, 685127410.3871999],
  [1177384, 3259299600, 0, 3837447200.2464],
  [28713, 2766931200, 1, 79655283.01439999],
  [8000475, 1230127200, 1, 9899666157.78],
  [5486308, 598197600, 0, 3281896278.4608],
  [4265508, 2425442400, 0, 10345743960.739199],
  [7196374, 1569268800, 0, 11293045191.3312],
  [9839848, 1653710400, 0, 16272258972.0192],
  [6449184, 370051200, 0, 2386528278.2208],
  [7331463, 337618800, 0, 2475239740.3044],
  [7137974, 302626800, 0, 2160142230.1032],
  [9722371, 2540779200, 0, 24702398011.483196],
  [1517829, 1878004800, 0, 2850490147.5792],
  [7680116, 1506013200, 1, 11622095283.4128],
  [6557759, 650620800, 1, 4314207998.5056],
  [582624, 1283698800, 1, 752142181.5935999],
  [6484379, 2712006000, 0, 17585674754.274],
  [1737440, 3450229200, 0, 5994566221.247999],
  [1604838, 666165600, 0, 1069087869.1728],
  [8210545, 589078800, 1, 4896246847.338],
  [2987791, 2834305200, 1, 8489995759.7748],
  [7161274, 1497996000, 0, 10727559806.904],
  [2170679, 1346778000, 1, 2939176642.1723995],
  [2303036, 2744402400, 0, 6320457525.6864],
  [6137959, 1959883200, 0, 12029682726.3888],
  [6415478, 1724994000, 0, 11066661057.131998],
  [2210623, 3347913600, 0, 7400974806.1728],
  [5154421, 2485566000, 1, 12849062313.135601],
  [4946471, 1995652800, 0, 9871438701.268799],
  [6288064, 2448644400, 0, 15397232700.441599],
  [489921, 3377307600, 1, 1658169567.3492],
  [4433938, 944827200, 1, 4221484973.9423995],
  [6633527, 1930806000, 0, 12808053732.762],
  [8761684, 487648800, 0, 4272624688.5791993],
  [9141859, 2573802000, 0, 23529334977.918],
  [1222665, 3370712400, 1, 4130125690.0499997],
  [7720903, 1320238800, 0, 10193435711.6364],
  [4860057, 3466656000, 0, 16848145759.391998],
  [7281456, 2001657600, 1, 14627827636.531199],
  [5910810, 2381616000, 1, 14120177963.616],
  [5851063, 2111392800, 1, 12396356965.3752],
  [6235157, 782218800, 0, 4877257026.3516],
  [3921859, 2163412800, 1, 8513063244.2736],
  [3895533, 3347287200, 0, 13039467748.0776],
  [1003083, 2377411200, 1, 2392020733.9104],
  [8326994, 403246800, 0, 3357833684.1191998],
  [3944158, 1129622400, 0, 4455409225.939199],
  [5906581, 226296000, 0, 1336635653.976],
  [9621534, 1611338400, 1, 15573376446.263998],
  [483408, 2511738000, 0, 1214194243.104],
  [8458150, 1835679600, 1, 15587839278.18],
  [6811209, 2493302400, 0, 16982403746.601599],
  [8240415, 33199200, 1, 333380821.572],
  [756979, 1752904800, 1, 1332405973.3896],
  [3462668, 1690722000, 1, 5879539625.5728],
  [5138072, 201333600, 1, 1071756604.1664001],
  [9406737, 972464400, 1, 9215987187.114],
  [2633372, 1764180000, 0, 4645742214.96],
  [5453530, 1175155200, 1, 6448323677.184],
  [1194905, 1633906800, 1, 1961035547.382],
  [7561451, 58942800, 1, 500571080.7804],
  [190495, 1923523200, 0, 366421551.98399997],
  [4301501, 1092196800, 1, 4729304201.0544],
  [5374070, 1725163200, 1, 9310150648.655998],
  [7949967, 1373958000, 1, 10980618439.8852],
  [7289542, 1164067200, 1, 8538421325.2416],
  [3380276, 1228222800, 1, 4176264744.5903997],
  [8151987, 70405200, 1, 633106135.9836],
  [3821775, 721803600, 0, 2758570953.39],
  [6661197, 1312333200, 0, 8741709974.840399],
  [4259274, 3019442400, 1, 12891544615.8],
  [8820997, 1400295600, 1, 12416022554.5404],
  [6694912, 2740042800, 1, 18392934415.5648],
  [6687423, 1771246800, 1, 11893611230.1612],
  [7830849, 968198400, 0, 7581815472.4416],
  [5546238, 2671693200, 0, 14817846350.181599],
  [3098046, 2388063600, 0, 7398330883.7256],
  [2681053, 3517189200, 0, 9429770656.2276],
  [433849, 713836800, 1, 312846084.34559995],
  [5911945, 2809609200, 1, 16653161593.925997],
  [7777828, 2374362000, 0, 18467379245.736],
  [7381958, 3249572400, 1, 24041782273.14],
  [4849927, 724280400, 1, 3547905897.726],
  [3477865, 2855023200, 0, 9929385261.468],
  [1653898, 1805428800, 0, 2985995081.4624],
  [5111099, 645595200, 0, 3299700981.1247997],
  [7696275, 3403634400, 0, 26195306341.86],
  [9051471, 1391439600, 1, 12660267143.5812],
  [5076189, 330300000, 0, 1676665226.6999998],
  [1334751, 2774178000, 0, 3702836859.678],
  [1780216, 2689927200, 0, 4788651440.2752],
  [8180955, 3280190400, 1, 26894464152.839996],
  [4199469, 1270846800, 0, 5336881740.349199],
  [6192434, 2813295600, 1, 17466089534.4888],
  [4382343, 1187712000, 1, 5236766661.7727995],
  [8436524, 978814800, 1, 8319023468.337601],
  [4519967, 113331600, 0, 512255092.05719995],
  [5292613, 171259200, 1, 944820336.3984],
  [7875438, 952614000, 0, 7502252494.932],
  [3903038, 1499608800, 0, 5853030131.5344],
  [2867878, 2878002000, 0, 8253758619.756],
  [7564212, 2004084000, 0, 15159316241.807999],
  [6648823, 1955070000, 1, 13047168880.414799],
  [5521913, 1436641200, 1, 7973083554.4044],
  [5880095, 3429136800, 0, 20163650151.996],
  [3378199, 2454019200, 0, 8290165207.4208],
  [3183375, 754081200, 0, 2400523240.0499997],
  [5590707, 1726653600, 1, 9693789483.2184],
  [9241811, 617151600, 1, 5770671813.0612],
  [1352012, 3570314400, 1, 4836920274.863999],
  [4013904, 1121731200, 1, 4531652660.2752],
  [8979184, 3222702000, 0, 28937234235.168],
  [9261774, 424976400, 0, 3936035372.1335998],
  [4990909, 1557352800, 0, 7772606105.695199],
  [5473599, 2480734800, 1, 13618272712.6476],
  [1791579, 3594898800, 0, 6440545197.205199],
  [425976, 570654000, 0, 243084908.304],
  [7087346, 665406000, 0, 4715962552.476],
  [1754749, 2065064400, 1, 3636404957.178],
  [6392469, 2444760000, 0, 15628052512.439999],
  [8355298, 237340800, 1, 2043692522.3232],
  [3143090, 1465012800, 0, 4604667081.552],
  [2429560, 2569392000, 1, 6260124802.176],
  [576399, 2685787200, 1, 1552268329.6752],
  [1480248, 2514924000, 1, 3733454269.0368],
  [941114, 3003177600, 0, 2826332483.8464],
  [6506822, 90496800, 1, 636070480.5168],
  [6282711, 3506788800, 0, 22032140568.4368],
  [3118306, 2054052000, 0, 6405162675.912],
  [9058466, 3031700400, 0, 27462554995.5864],
  [7084964, 3029040000, 0, 21460639354.559998],
  [9059493, 2663809200, 1, 24198510977.1324],
  [4707823, 313362000, 0, 1475252830.9259999],
  [463890, 2637867600, 0, 1223680400.964],
  [5594998, 1077289200, 0, 6027430919.421599],
  [2900383, 1452499200, 0, 4212803987.1935997],
  [783187, 2815776000, 1, 2210963216.0832],
  [9839608, 1787648400, 1, 17661171436.848003],
  [2495883, 3517941600, 1, 8798484754.8936],
  [3387785, 3522913200, 0, 11934872495.262001],
  [4859183, 2851430400, 0, 13855622125.3632],
  [9009119, 3520123200, 1, 31778593385.5152],
  [878840, 2421698400, 1, 2134663691.04],
  [489976, 2005387200, 0, 982591598.7071999],
  [258768, 1097049600, 0, 283881330.8928],
  [2897198, 1650636000, 1, 4803246022.132799],
  [1475004, 1004151600, 1, 1491832615.6368],
  [6353990, 3235575600, 1, 20604929724.468],
  [6393399, 3047061600, 0, 19481080586.3784],
  [3223991, 635990400, 1, 2073825762.768],
  [3580912, 565372800, 1, 2050539070.9248],
  [693752, 2829538800, 0, 1962998201.5775998],
  [7323839, 959760000, 0, 7029127718.639999],
  [486117, 3155724000, 1, 1537579126.4472],
  [9251546, 3482614800, 0, 32219571022.480797],
  [1296994, 2430799200, 0, 3152731977.6047997],
  [9457824, 437446800, 1, 4205935947.2256002],
  [5378026, 21556800, 1, 154964592.37440002],
  [6360622, 676558800, 0, 4303334787.5736],
  [6711107, 1413950400, 1, 9537878957.255999],
  [1999439, 3513841200, 1, 7040222263.573199],
  [1209041, 1759842000, 0, 2127721131.522],
  [5003846, 1447686000, 1, 7280313713.085599],
  [2554987, 1057716000, 1, 2720993703.3431993],
  [5882147, 2952766800, 0, 17368608374.3196],
  [2845065, 2956212000, 0, 8410615293.78],
  [6184547, 2501863200, 1, 15517775516.277597],
  [8905055, 3060979200, 0, 27258188129.856],
  [932903, 2493568800, 1, 2333028451.0392],
  [2082049, 3131074800, 0, 6519051156.2652],
  [5427441, 842796000, 0, 4574225565.036],
  [9016973, 394995600, 1, 3627106243.5636],
  [3575521, 3097450800, 0, 11075000381.866798],
  [6009177, 833205600, 1, 5050492130.7864],
  [6684734, 2852841600, 1, 19119002365.6128],
  [1567805, 3237501600, 1, 5087149697.556],
  [7590248, 3141802800, 1, 23902149402.9792],
  [6483892, 3124548000, 0, 20259231780.815998],
  [8240821, 2698891200, 1, 22300887860.164803],
  [5712237, 2927808000, 1, 16765790317.7472],
  [9472501, 3138735600, 1, 29800423732.9932],
  [5647036, 2617725600, 0, 14782390701.3216],
  [735915, 548038800, 0, 403309973.502],
  [5107025, 515865600, 1, 2671603260.48],
  [3682482, 419619600, 0, 1545241623.8472],
  [7427510, 1014570000, 0, 7535728820.7],
  [1397287, 2103616800, 1, 2949497357.7527995],
  [4393093, 3240522000, 0, 14235914514.545998],
  [887602, 3464773200, 1, 3081781482.1416],
  [9049119, 3197124000, 0, 28931155533.755997],
  [3525037, 1652238000, 0, 5824200082.806],
  [2418888, 3009171600, 0, 7278849073.1807995],
  [5216567, 1573646400, 1, 8246891636.567999],
  [1941214, 139795200, 0, 271372399.3728],
  [5430687, 56401200, 1, 345711017.5956],
  [2431525, 3572658000, 1, 8704654279.289999],
  [5617472, 1517727600, 1, 8566561661.414399],
  [8516535, 2126934000, 0, 18114107853.69],
  [487656, 3209612400, 0, 1565186744.5344],
  [7861011, 3093685200, 0, 24319493387.737198],
  [7595740, 634968000, 1, 4878178678.943999],
  [2928743, 896191200, 0, 2624713703.6616],
  [1344678, 617130000, 1, 839600269.1928],
  [7193296, 1611950400, 1, 11647442429.567999],
  [3853267, 1939291200, 1, 7500572254.9296],
  [1837883, 1311285600, 0, 2409989512.3848],
  [475077, 3371306400, 1, 1605078049.428],
  [4305336, 136087200, 0, 585901121.2991999],
  [6568471, 2400242400, 1, 15813593932.5],
  [751625, 2181754800, 1, 1645316445.1499999],
  [1070680, 303746400, 1, 332985762.7199999],
  [9749178, 1533538800, 1, 15021498365.359198],
  [5369973, 2775402000, 1, 14942806920.1908],
  [4080240, 1727661600, 1, 7078886716.608],
  [99740, 2368555200, 0, 236239695.648],
  [1276594, 115675200, 1, 156935274.8832],
  [2594858, 1403974800, 1, 3661947682.9992],
  [4572492, 551257200, 1, 2553804454.8816],
  [2560849, 3359916000, 1, 8622823146.386398],
  [3572493, 407664000, 0, 1456376786.3519998],
  [4564255, 3426379200, 1, 15671993932.584],
  [3063870, 2167401600, 1, 6662873083.103999],
];

const TestTokenName = "Test Token";

const expectWithin5PctErr = (line: number, x_: BigNumberish, y_: number) => {
  const x = BigNumber.from(x_);
  const y = BigNumber.from(Math.floor(y_));
  const b = (x.gt(y) ? x : y).mul(1e6).div(BigNumber.from(5).mul(1e6).div(100));
  assert.ok(
    x.sub(y).abs().lte(b),
    `line: ${line}, ${x_} - ${y_} > 0.05 difference!`
   );
};

const withSnapshot = async (k: () => Promise<void>) => {
  const snapshotId = await hre.network.provider.request({
    method: "evm_snapshot",
    params: []
  });

  await k();

  await hre.network.provider.request({
    method: "evm_revert",
    params: [snapshotId]
  });
};

describe("StakingV1", async () => {
  let signer: ethers.Signer;

  let signerAddr: string;

  let testToken: ethers.Contract;
  let stakingContract: ethers.Contract;

  let flyContract: ethers.Contract;

  before(async function() {
    const stakingContractFactory = await hre.ethers.getContractFactory("StakingV1");
    stakingContract = await stakingContractFactory.deploy();

    const testTokenFactory = await hre.ethers.getContractFactory("TestGovToken");
    testToken = await testTokenFactory.deploy(TestTokenName, "TT", 6, MaxUint256);

    await stakingContract.init(
      testToken.address, // fly token
      "0x0000000000000000000000000000000000000000", // zero since we don't use the merkle
      "0x0000000000000000000000000000000000000000", // zero since no emergency
      "0x0000000000000000000000000000000000000000", // zero for no operator
    );

    await testToken.approve(stakingContract.address, MaxUint256);

    ({ signer } = testToken);

    signerAddr = await signer.getAddress();
  });

  it("cant stake too little", async () => {
    await expect(stakingContract.stake(0)).to.be.revertedWith("too little fly");
  });

  it("can stake some", async () => {
    await withSnapshot(async () => {
      const amountStaked = 1000 * 1e6;
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      await stakingContract.stake(amountStaked);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr)
      expect(flyStaked).to.be.equal(amountStaked);
      await advanceTime(hre, 1000); // advance time by 1000 seconds
      await sendEmptyTransaction(signer);
      let points: BigNumber;
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(amountStaked);
      expect(points).to.be.equal(1000);
    });
  });

  it("cant double down on unstaking an amount, can only unstake an amount once", async () => {
    await withSnapshot(async () => {
      const amountStaked = 18281 * 1e6;
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      await stakingContract.stake(amountStaked);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr)
      expect(flyStaked).to.be.equal(amountStaked);
      await stakingContract.beginUnstake(amountStaked);
      const { flyStaked: curFlyStaked } = await stakingContract.stakingDetails(signerAddr);
      expect(curFlyStaked).to.be.equal(0);
      const amountUnstaking = await stakingContract.amountUnstaking(signerAddr);
      expect(amountUnstaking).to.be.equal(flyStaked);
      // second attempt, should break
      await expect(stakingContract.callStatic.beginUnstake(amountStaked))
        .to.be.revertedWith("no fly unstaked");
    });
  });

  it("cant stake for someone else", async () => {
  });

  it("staking for someone else is fine as merkle", async () => {
  });

  it("stake then unstake 0 doesnt cause weirdness", async () => {
    await withSnapshot(async () => {
      const amountStaked = BigNumber.from(41554 * 1e6);
      // simulate first
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      // then send on-chain to continue the life of the testing
      await stakingContract.stake(amountStaked);
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr);
      expect(flyStaked).to.be.equal(amountStaked);
      const { flyRemaining } = await stakingContract.callStatic.beginUnstake(0);
      await stakingContract.beginUnstake(0);
      expect(flyRemaining).to.be.equal(0);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(amountStaked);
    });
  });

  it("stake, have a certain number of points in the future, begin unstaking, dont have the same points", async () => {
    withSnapshot(async () => {
      // stake first
      const amountStaked = BigNumber.from(4454545* 1e6);
      expect(await stakingContract.callStatic.stake(amountStaked))
        .to.be.equal(amountStaked);

      await stakingContract.stake(amountStaked);
      expect(await stakingContract.stakingPositionsLen(signerAddr))
        .to.be.equal(1);

      // now wait a seeminly random amount of time, get the points
      const waitTime = 444035535989;
      await advanceTime(hre, waitTime);
      await sendEmptyTransaction(signer);
      const curPoints = stakingContract.balanceOf(signerAddr);
      const { points: curPoints1 } =
        await stakingContract.stakingDetails(signerAddr);
      expect(curPoints).to.be.equal(curPoints1);

      // begin to unstake finally
      const { flyRemaining, unstakedBy } =
        await stakingContract.callStatic.beginUnstake(amountStaked);
      await stakingContract.beginUnstake(amountStaked);
      expect(flyRemaining).to.be.equal(0);

      // check the points are not the same, and that they're 0
      expect(await stakingContract.balanceOf(signerAddr)).to.be.equal(0);
      const { points: curPoints2 } =
        await stakingContract.stakingDetails(signerAddr);
      expect(curPoints2).to.be.equal(0);
    })
  });

  it("stake, have a certain number of points in the future, begin unstaking, unstake fully, dont have the same amount of points", async () => {
    await withSnapshot(async () => {
      // first, stake an arbitrary amount.
      const stakeAmount = BigNumber.from(
        // random number i chose
        "51317253906870152199262132321886643552971805669285596207895276767218547159680"
      );
      expect(await stakingContract.callStatic.stake(stakeAmount)).to.be.equal(stakeAmount);
      await stakingContract.stake(stakeAmount);
      // wait a couple of seconds to simulate a real user with real points.
      const firstDelaySeconds = 9603965;
      await advanceTime(hre, firstDelaySeconds);
      let { flyStaked, points } = await stakingContract.stakingDetails(signerAddr);
      // ensure that the fly staked has remained the same.
      expect(flyStaked).to.be.equal(stakeAmount);

      // second, begin to unstake. check that the points after beginning are 0, as well as the FLY.
      const unstakeAmount = stakeAmount.add(100);
      const { flyRemaining: unstakeFlyRemaining } =
        await stakingContract.callStatic.beginUnstake(unstakeAmount);
      console.log("we did the unstake");
      // since we didn't take the full amount, 100 is enough.
      expect(unstakeFlyRemaining).to.be.equal(100);

      // thirdly, begin the unstaking process.
      await stakingContract.beginUnstake(unstakeAmount);
      await stakingContract.beginUnstake(unstakeAmount);
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      // make sure that the points are 0.
      expect(flyStaked).to.be.equal(0);
      expect(points).to.be.equal(0);
      // make sure that the FLY that we're about to receive is recorded as being there.
      const amountUnstaking = await stakingContract.amountUnstaking(signerAddr);
      expect(amountUnstaking).to.be.equal(stakeAmount);

      // fourthly, attempt to unstake before the time. make sure nothing happens.
      await expect(stakingContract.callStatic.finaliseUnstake()).to.be.revertedWith("no fly returned");

      // finally, advance time, and finalise the withdraw.
      const unlockSeconds = SevenDays.add(1000);
      const secondsUntilFullyUnstaked = await stakingContract.secondsUntilFullyUnstaked(signerAddr);
      expect(secondsUntilFullyUnstaked).to.lt(unlockSeconds);
      await advanceTime(hre, unlockSeconds);
      await sendEmptyTransaction(signer); // advance time
      expect(await stakingContract.callStatic.finaliseUnstake()).to.be.equal(stakeAmount);
      await stakingContract.finaliseUnstake();
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(0);
      expect(points).to.be.equal(0);
    });
  });

  it("can unstake fully one position, leaving a few positions left", async () => {
    await withSnapshot(async () => {
      const s1 = BigNumber.from(41554 * 1e6);
      expect(await stakingContract.callStatic.stake(s1)).to.be.equal(s1);
      await stakingContract.stake(s1);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr);

      const s2 = BigNumber.from(17279899).mul(1e6);
      expect(await stakingContract.callStatic.stake(s2)).to.be.equal(s2);
      await stakingContract.stake(s2);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2));

      const s3 = BigNumber.from(172 * 1e6);
      expect(await stakingContract.callStatic.stake(s3)).to.be.equal(s3);
      await stakingContract.stake(s3);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2).add(s3));

      /*
       * unstake half of the second amount, and test that the time is correct,
       * as well as the new amount staked.
       */

      const flyUnstake1 = s2.div(2);
      let { flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake1);
      await stakingContract.beginUnstake(flyUnstake1);

      // the timestamp test isn't reliable, so we don't bother.
      //expect(await getLatestTimestamp(hre)).to.be.equal(unstakedBy.sub(604800));
      expect(flyRemaining).to.be.equal(0);

      // the amount of positions remaining should be equal to 2 since we
      // closed the newest position.
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(2);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2.sub(flyUnstake1)).add(s3));

      /*
       * unstake more than the second amount, this time the entire first position as well.
       */

      const flyUnstake2 = s2.sub(flyUnstake1).add(s1);
      ({ flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake2));

      await stakingContract.beginUnstake(flyUnstake2);
      expect(flyRemaining).to.be.equal(0);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s3);
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);

      /*
       * unstake just 1 this time.
       */

      const flyUnstake3 = 1;
      ({ flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake3));

      await stakingContract.beginUnstake(flyUnstake3);
      expect(flyRemaining).to.be.equal(0);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s3.sub(1));
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);
    });
  });

  it("should support staking with the permit router just fine", async () => {
    const chainId = await hre.network.provider.send("eth_chainId");
    const nonce = 0;

    const permitAmount = MaxUint256;
    const deadline = MaxUint256;

    // create the signature for testing the permit approval version of
    // the stake UX.

    const sig = await hre.network.provider.send(
      "eth_signTypedData_v4",
      [signerAddr, JSON.stringify({
        domain: {
          name: TestTokenName,
          version: "1",
          chainId: chainId,
          verifyingContract: testToken.address
        },

        primaryType: "Permit",

        types: {
          EIP712Domain: [
            { name: "name", type: "string" },
            { name: "version", type: "string" },
            { name: "chainId", type: "uint256" },
            { name: "verifyingContract", type: "address" },
          ],
          Permit: [
            { name: "owner", type: "address" },
            { name: "spender", type: "address" },
            { name: "value", type: "uint256" },
            { name: "nonce", type: "uint256" },
            { name: "deadline", type: "uint256" },
          ]
        },

        message: {
          owner: signerAddr,
          spender: stakingContract.address,
          value: permitAmount.toHexString(),
          nonce: nonce,
          deadline: deadline.toHexString(),
        }
      })]
    );

    const { r, s, v } = hre.ethers.utils.splitSignature(sig);

    const flyStaked = await stakingContract.callStatic.stakePermit(
      permitAmount, // fly amount
      deadline,
      v,
      r,
      s
    );

    expect(flyStaked).to.be.equal(permitAmount);
  });

  it("every automated test we created works", async () => {
    for (let i = 0; i < stakingTests.length; i++) {
      const [fly, seconds, isBonus, expectedPoints] = stakingTests[i];
      const points = await stakingContract.calculatePointsAddSecs(seconds, {
        receivedBonus: !!isBonus,
        flyVested: fly,
        depositTimestamp: 0 // we can set this to 0 for this function.
      });
      expectWithin5PctErr(i, points, expectedPoints);
    }
  });
});
