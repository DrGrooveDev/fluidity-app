// Test the staking implementation. Should not be run in parallel, since
// it uses snapshotting/reverts to rollback.

import * as ethers from "ethers";
import { BigNumber } from "ethers";
import type { BigNumberish } from "ethers";

import * as hre from "hardhat";

import { expect, assert } from "chai";

import { getLatestTimestamp } from "../script-utils";
import { advanceTime, sendEmptyTransaction } from "./test-utils";

const { MaxUint256 } = ethers.constants;

const SevenDays = BigNumber.from(604800);

const stakingTests = [
  // FLY,Seconds,Bonus,Points
  [3385553, 1331478000, 0, 4507789337.334],
  [456897, 1329778800, 1, 608677269.606],
  [4439334, 1074697200, 0, 4770939819.6648],
  [7579533, 1279339200, 0, 9696793684.5936],
  [5915505, 3556490400, 1, 21052747533.347996],
  [1480253, 2598505200, 0, 3846445117.8156],
  [7820206, 2146147200, 0, 16783313210.3232],
  [5969763, 2935555200, 1, 17539010868.0672],
  [6002549, 83239200, 1, 514168743.26159996],
  [9360813, 3317457600, 1, 31076745907.8384],
  [8388152, 1707919200, 0, 14326285853.3184],
  [7990501, 830890800, 1, 6658564388.31],
  [7025612, 3240756000, 1, 22785290603.2224],
  [9100773, 1736128800, 0, 15800114107.5624],
  [8392534, 2001808800, 1, 16820551633.751999],
  [2925755, 1572818400, 1, 4608759284.388],
  [4113092, 1124589600, 0, 4625540487.0432],
  [7258251, 2950279200, 0, 21413866953.6792],
  [6858961, 3419074800, 0, 23451300709.2828],
  [8458637, 2811002400, 0, 23777248907.728798],
  [2351341, 3050798400, 0, 7173467360.654399],
  [9359361, 1192788000, 1, 11186375654.599201],
  [4342335, 2911068000, 1, 12651337440.612],
  [6783608, 632847600, 1, 4309400946.6144],
  [1548797, 1751954400, 0, 2713421718.8568],
  [8162658, 2015996400, 0, 16455889142.4312],
  [6909893, 1966111200, 0, 13585618018.101599],
  [8436405, 2689862400, 1, 22713177951.648],
  [2602694, 3141540000, 1, 8182763746.0848],
  [5175655, 3284474400, 0, 16999306350.732],
  [5911169, 3080710800, 1, 18224902478.97],
  [2757854, 2095005600, 1, 5784391374.3792],
  [4961852, 2507565600, 0, 12442169387.4912],
  [7215562, 3477128400, 1, 25106891439.751198],
  [6051952, 1113976800, 0, 6741734122.7136],
  [6848004, 1548741600, 0, 10605788671.7664],
  [8675406, 667692000, 1, 5813486725.1472],
  [1924415, 795416400, 1, 1535366796.1739998],
  [4923173, 1041782400, 1, 5140785123.6768],
  [4709499, 689565600, 1, 3258901723.6152],
  [4458366, 767296800, 0, 3420889965.0288],
  [5479593, 147484800, 1, 821412909.0719999],
  [6722192, 1072022400, 1, 7222602727.9872],
  [1258555, 473770800, 0, 596266609.1939999],
  [3848325, 2494699200, 1, 9609723166.68],
  [2153075, 3319383600, 0, 7146881844.57],
  [9631986, 1258718400, 1, 12147259707.2736],
  [4780366, 25484400, 1, 133389420.7176],
  [6688434, 315648000, 0, 2111190815.232],
  [6597227, 3133238400, 0, 20670684969.916798],
  [3830638, 1745978400, 1, 6697478285.6688],
  [4026598, 2646208800, 0, 10655219061.6624],
  [6026112, 1935284400, 1, 11676818916.403198],
  [645471, 433310400, 1, 281250820.6416],
  [2176019, 2895760800, 0, 6301230520.255199],
  [3036162, 2435986800, 1, 7403395637.772],
  [8704443, 3440163600, 1, 29965765755.380398],
  [1516987, 3421072800, 1, 5193392858.604],
  [4965894, 797472000, 1, 3972174910.7327995],
  [4860635, 2372936400, 1, 11545736566.805998],
  [1518730, 1870484400, 0, 2840760772.812],
  [1485875, 2601565200, 1, 3869195320.35],
  [3237671, 870555600, 0, 2818572620.0076],
  [6576065, 1276956000, 1, 8413254474.587999],
  [7647252, 2067652800, 1, 15830362242.144001],
  [3416174, 1821596400, 0, 6222890260.173599],
  [3970288, 303454800, 1, 1214407871.712],
  [2719543, 279511200, 0, 760142727.3815999],
  [5652124, 2996942400, 0, 16939090065.657598],
  [5940630, 2895760800, 0, 17202643481.303997],
  [1032296, 2804540400, 0, 2895115836.7583995],
  [1675271, 1018252800, 0, 1705849386.5088],
  [1404417, 3102480000, 1, 4360573219.766399],
  [5537779, 1370228400, 0, 7588022058.723599],
  [6289846, 707158800, 0, 4447919949.5448],
  [7731925, 1905256800, 0, 14731302683.339998],
  [5970712, 1085180400, 1, 6493743982.915199],
  [7460091, 1198202400, 0, 8938698940.4184],
  [4872889, 1531018800, 0, 7460484669.3132],
  [7188686, 2478938400, 0, 17820309770.942398],
  [822981, 2740482000, 0, 2255364616.842],
  [4172278, 529686000, 0, 2209997244.7079997],
  [6559989, 45244800, 1, 312675315.69600004],
  [7378944, 962190000, 1, 7117797268.684799],
  [7724101, 1805623200, 0, 13946815964.743198],
  [2085576, 2216242800, 0, 4622142793.8528],
  [160208, 1753905600, 0, 280989708.3648],
  [126625, 2158052400, 0, 273263385.15],
  [6252096, 2987193600, 0, 18676221157.7856],
  [5886777, 2690096400, 1, 15850238906.221199],
  [2486378, 662335200, 0, 1646815669.9055998],
  [3599641, 464554800, 0, 1672230504.8267999],
  [3856074, 2823706800, 1, 10897750989.324001],
  [6389672, 3247506000, 0, 20750498158.032],
  [6446292, 1323090000, 1, 8544619351.886399],
  [5149052, 1839722400, 0, 9472826303.1648],
  [2549434, 1487095200, 1, 3797418654.8496],
  [7022336, 596044800, 1, 4202615291.904],
  [9077078, 3297042000, 1, 29949466670.3736],
  [2527573, 1047398400, 0, 2647375916.0832],
  [7420957, 1049896800, 0, 7791239007.237599],
  [5203605, 148867200, 1, 787234667.4719999],
  [8369062, 1602529200, 0, 13411666231.6104],
  [5826507, 1888164000, 1, 11015496248.882399],
  [6676205, 1267963200, 1, 8481333330.791999],
  [481214, 1816264800, 1, 875176202.3759999],
  [5744974, 1425992400, 0, 8192289262.1976],
  [7134182, 596955600, 1, 4276048909.4136],
  [8513587, 3228109200, 0, 27482788519.700397],
  [640544, 3104992800, 1, 1990434112.128],
  [4960151, 8107200, 0, 40212936.187199995],
  [3490152, 2155035600, 0, 7521401809.4112],
  [4624899, 1524178800, 1, 7060361563.602],
  [2875176, 1547892000, 1, 4457417554.771199],
  [7595856, 73742400, 1, 578512546.3295999],
  [5154050, 56538000, 0, 291399678.9],
  [2863956, 3442834800, 0, 9860127382.4688],
  [420408, 1717959600, 0, 722243959.5168],
  [9727210, 999151200, 0, 9718953544.151999],
  [4105507, 2630754000, 0, 10800578962.278],
  [6417833, 2281402800, 1, 14657188197.726],
  [6457700, 3559503600, 1, 23001828865.56],
  [982645, 1557442800, 0, 1530413380.206],
  [2538698, 604926000, 1, 1541866044.5496],
  [303014, 2375211600, 1, 720455419.2312],
  [654249, 1910232000, 0, 1249767375.768],
  [348987, 1424815200, 1, 498086251.55279994],
  [4691426, 3451816800, 1, 16205292580.536],
  [3568719, 1517792400, 0, 5416574575.935599],
  [7893328, 2067228000, 0, 16317308654.783998],
  [6213897, 2218536000, 1, 13800786854.414398],
  [3213360, 581482800, 0, 1868513570.208],
  [3606795, 1613934000, 0, 5821129081.53],
  [6796210, 1848499200, 0, 12562788748.032],
  [1833322, 1740834000, 1, 3195944443.1303997],
  [2793415, 3337819200, 1, 9330672050.136002],
  [8690717, 2893906800, 0, 25150125023.1756],
  [671770, 165891600, 0, 111441000.132],
  [4909584, 293238000, 0, 1439676592.9919999],
  [1575174, 1824800400, 0, 2874378145.2696],
  [2396157, 2192803200, 0, 5254300737.302401],
  [5480295, 1719259200, 0, 9422047597.464],
  [2084471, 657561600, 1, 1375710838.1567998],
  [3355738, 845924400, 1, 2846818855.5767994],
  [4032088, 1666126800, 0, 6717969876.7584],
  [4678554, 1166331600, 1, 5468063730.3432],
  [4956618, 3031711200, 0, 15027034304.7216],
  [3368893, 556189200, 0, 1873741902.5556],
  [4775856, 1826629200, 1, 8735271775.430399],
  [4225042, 794944800, 1, 3368896389.288],
  [8774122, 829116000, 0, 7274764936.152],
  [270878, 2665850400, 0, 722120224.6512],
  [4859285, 440881200, 0, 2142367401.942],
  [7215598, 413258400, 0, 2981906484.5232],
  [2492999, 95720400, 0, 238630861.47959998],
  [5364054, 768769200, 1, 4136696221.7735996],
  [8755548, 2358122400, 1, 20667835284.7968],
  [7801223, 358128000, 1, 2812709109.2256],
  [5571972, 2204294400, 1, 12295746391.219198],
  [7765732, 331250400, 0, 2572401831.2928],
  [61213, 244900800, 0, 14991112.6704],
  [8294639, 3578666400, 1, 29703812280.0984],
  [6649934, 3307698000, 1, 22012060912.2648],
  [3967393, 3462256800, 1, 13745731309.668],
  [7354525, 2694758400, 1, 19836460088.64],
  [5331910, 3345199200, 1, 17849200023.144],
  [1800618, 2172517200, 1, 3916229630.6951995],
  [2659559, 3281360400, 0, 8726971584.063599],
  [4481821, 793666800, 0, 3557072531.2428],
  [5859629, 1457013600, 1, 8551734758.4312],
  [8225106, 2759907600, 1, 22720430736.6408],
  [585959, 2944116000, 0, 1725131267.244],
  [5446461, 1957150800, 0, 10659545503.318798],
  [243139, 2621088000, 0, 637288715.232],
  [3586634, 1174014000, 0, 4210758528.8759995],
  [9630206, 13266000, 1, 151051707.1512],
  [1018700, 1931086800, 0, 1967198123.1599998],
  [4830803, 2946654000, 1, 14246391661.779598],
  [2988751, 2952799200, 0, 8825181561.7992],
  [8454142, 920646000, 0, 7783272015.731999],
  [5528239, 674845200, 1, 3744079469.3916],
  [7142829, 1130212800, 0, 8072916764.0112],
  [784016, 901530000, 1, 708710635.9871999],
  [3287, 2264097600, 0, 7442088.8112],
  [7027934, 2205352800, 1, 15516075903.048],
  [3735553, 1904983200, 0, 7116165707.7095995],
  [3891259, 1021280400, 0, 3974066548.0235996],
  [4279027, 3022045200, 1, 12941764828.138802],
  [2627190, 402735600, 0, 1058062940.9639999],
  [7072141, 1143136800, 1, 8101533555.396],
  [2822355, 1589482800, 1, 4492912569.209999],
  [8134834, 2390292000, 1, 19464308421.9408],
  [1014930, 3099988800, 0, 3146271632.7839994],
  [7024605, 3433482000, 0, 24118854824.609997],
  [5102701, 152650800, 1, 791275844.0699999],
  [4156581, 1789138800, 1, 7446755943.198001],
  [5046550, 989730000, 1, 5006930545.26],
  [4979952, 2394921600, 0, 11926594611.7632],
  [8661048, 22230000, 1, 213487904.36159998],
  [4988022, 2575242000, 1, 12857430774.146399],
  [4627612, 2153170800, 0, 9964039032.1296],
  [3646684, 1051488000, 1, 3843266523.7247996],
  [9099816, 729187200, 0, 6635469349.555199],
  [4749818, 412495200, 1, 1970767885.5791998],
  [6304059, 838843200, 0, 5288117024.5487995],
  [4447581, 2304684000, 1, 10261028357.3592],
  [265046, 1190725200, 0, 315596951.3592],
  [7332551, 3266038800, 1, 23966134976.357998],
  [555192, 2251620000, 0, 1250081411.04],
  [7938063, 3007119600, 1, 23889908595.344402],
  [5114846, 3503462400, 1, 17932044478.2336],
  [8830792, 2972973600, 0, 26253711483.091198],
  [2227533, 418276800, 0, 931725375.1343999],
  [1736143, 54669600, 1, 99114320.4984],
  [8006697, 3219415200, 1, 25796251824.9768],
  [1285339, 3434256000, 1, 4417292664.8928],
  [7931775, 1925539200, 1, 15292132238.16],
  [5156609, 1847790000, 1, 9540805412.602798],
  [1753719, 686372400, 0, 1203704318.9556],
  [5159083, 857527200, 0, 4424053999.5576],
  [6685306, 1782561600, 1, 11933142852.1248],
  [3160085, 1021604400, 0, 3228356740.374],
  [223167, 1046059200, 1, 233985779.0928],
  [499283, 2630685600, 1, 1314664463.8583999],
  [2891257, 3501216000, 0, 10122915268.512],
  [9737852, 442407600, 0, 4308099732.4752],
  [7493539, 922507200, 1, 6930972050.5296],
  [8558542, 1844568000, 0, 15786812699.855999],
  [8766483, 378054000, 1, 3335411839.7556],
  [5253816, 2537643600, 0, 13332312547.977598],
  [4508382, 2682756000, 0, 12094888860.792],
  [5336786, 772502400, 0, 4122679993.2864],
  [4790721, 1179982800, 1, 5664558091.842],
  [1282767, 1528884000, 1, 1964305211.9543998],
  [1773775, 2239768800, 1, 3977137019.7],
  [870928, 877622400, 0, 764345921.5871999],
  [3965196, 1820588400, 0, 7218989841.3264],
  [9549508, 2356675200, 0, 22505088675.801598],
  [8653529, 2372792400, 1, 20553962461.736397],
  [7149932, 133563600, 0, 954970657.6752],
  [7993389, 149929200, 1, 1217780024.7276],
  [830858, 3143840400, 0, 2612084947.0632],
  [6678152, 1346965200, 0, 8995238344.3104],
  [7353323, 2355138000, 1, 17335879582.575596],
  [7622258, 56214000, 1, 446917377.76559997],
  [7773348, 904521600, 1, 7049966453.798399],
  [3393642, 936320400, 0, 3177536234.8968],
  [6041450, 3053865600, 1, 18464391804.96],
  [6980805, 2154337200, 1, 15055895860.901999],
  [7319137, 2226618000, 0, 16296922188.665998],
  [2892853, 2705860800, 1, 7834655922.839999],
  [6806003, 2716603200, 1, 18505674611.467197],
  [8692382, 1534248000, 1, 13357298309.270401],
  [4485058, 1574388000, 0, 7061221494.504],
  [2887863, 2004966000, 1, 5797053445.8276],
  [4771559, 297262800, 0, 1418406988.7052],
  [8693552, 2068984800, 0, 17986826946.0096],
  [8775583, 1588680000, 1, 13962823090.8336],
  [1629469, 1131512400, 1, 1847706390.3203998],
  [1797561, 3563798400, 1, 6410493675.273601],
  [5585833, 2875575600, 0, 16062485080.4748],
  [2076714, 3060802800, 0, 6356412025.9992],
  [3112066, 48700800, 1, 159088813.92000002],
  [1223687, 1992078000, 0, 2437679951.586],
  [2376945, 2944422000, 1, 7004479456.134],
  [7532825, 311547600, 0, 2346833549.97],
  [1336101, 1502470800, 1, 2010685033.89],
  [8398381, 3071232000, 1, 25813693838.707195],
  [285349, 1861657200, 1, 531912336.66359997],
  [7190733, 2887560000, 0, 20763672981.48],
  [1540325, 2910754800, 0, 4483508387.309999],
  [2607256, 158072400, 1, 418442687.0496],
  [1227357, 3089275200, 0, 3791643541.6464],
  [2826381, 3373113600, 0, 9533704189.8816],
  [9553625, 3444642000, 1, 32931930056.85],
  [8987696, 2448990000, 0, 22010777627.04],
  [8878747, 1581019200, 0, 14037469478.942398],
  [9119929, 1038812400, 1, 9495958264.556398],
  [2767565, 2844982800, 1, 7880370116.13],
  [3951354, 926622000, 0, 3661411546.1879997],
  [6661836, 2232198000, 0, 14870536995.528],
  [481355, 1578538800, 0, 759837544.074],
  [900610, 2247753600, 0, 2024349369.6959999],
  [7612516, 1125169200, 0, 8565368537.707199],
  [1270950, 1701219600, 0, 2162165050.62],
  [8837107, 2490642000, 1, 22031448581.9484],
  [8120036, 182106000, 1, 1498351266.9071999],
  [5640795, 1702166400, 0, 9601571718.288],
  [676063, 1836093600, 0, 1241314947.4968],
  [4533935, 601239600, 1, 2736949761.378],
  [9092812, 2042186400, 1, 18591214334.9472],
  [4115322, 2215688400, 0, 9118271217.6648],
  [6286594, 907502400, 1, 5720307671.030399],
  [6186276, 1145851200, 0, 7088551778.1312],
  [2122375, 1514239200, 1, 3218917871.7],
  [4771037, 2771931600, 1, 13236530317.779598],
  [4324787, 3413178000, 1, 14771730367.796398],
  [5145337, 1423818000, 0, 7326023436.665999],
  [1529252, 170942400, 0, 261414007.08479998],
  [3688489, 637632000, 1, 2360821810.6368],
  [6442689, 2407269600, 1, 15524875525.183199],
  [787103, 1501610400, 1, 1183826210.2488],
  [3531427, 2420413200, 1, 8556055753.834799],
  [6277082, 2245507200, 0, 14095232825.9904],
  [2379228, 3014913600, 1, 7178922683.0784],
  [6339727, 3418070400, 1, 21684970270.3392],
  [6646547, 2211728400, 1, 14716436088.3372],
  [1426484, 1658361600, 1, 2369077238.7072],
  [3519362, 2326698000, 1, 8197006567.226399],
  [2408006, 1605438000, 0, 3865904336.628],
  [4511110, 3244622400, 0, 14636848554.863998],
  [3536208, 1186606800, 0, 4196088459.0143995],
  [293292, 250156800, 0, 73368988.1856],
  [6715284, 952124400, 0, 6393785749.329599],
  [3982840, 143244000, 1, 580153219.488],
  [7761155, 2718550800, 0, 21099094134.174],
  [6201390, 1772856000, 0, 10994171469.84],
  [5442820, 3486060000, 0, 18973997089.199997],
  [709486, 1095217200, 1, 778757658.8904],
  [6647344, 1277262000, 1, 8506481146.7328],
  [3578887, 1013104800, 1, 3634445641.7879996],
  [7333286, 1326517200, 1, 9745470697.010399],
  [8605073, 3559140000, 0, 30626659517.219997],
  [203961, 3209814000, 0, 654676873.2540001],
  [7159198, 706309200, 1, 5073926943.8232],
  [3314530, 587106000, 1, 1953998961.1560001],
  [3443649, 2370700800, 0, 8163861439.219199],
  [5661476, 675086400, 0, 3821985451.5263996],
  [137085, 3094214400, 1, 424502017.05599993],
  [7109518, 2281186800, 1, 16235337961.907999],
  [940126, 946666800, 1, 892260424.836],
  [1173750, 2109268800, 0, 2475754253.9999995],
  [3340614, 2018743200, 1, 6751923409.713599],
  [1831259, 2486451600, 0, 4553336870.5644],
  [9004091, 406954800, 1, 3686040749.0339994],
  [2667390, 1574348400, 1, 4205854128.5639997],
  [3787154, 1803945600, 1, 6840981677.7792],
  [3496811, 2498954400, 1, 8746830719.5896],
  [2342588, 3314095200, 0, 7763559646.377601],
  [3372637, 1799078400, 1, 6075797461.171199],
  [8320920, 2311459200, 0, 19233467086.463997],
  [3273645, 1311872400, 0, 4294604522.898],
  [9122123, 1162947600, 1, 10630619289.7164],
  [6596585, 1338332400, 0, 8828423434.854],
  [1364059, 1245837600, 0, 1699395990.8184],
  [2827361, 95191200, 0, 269139886.42319995],
  [3249707, 807120000, 1, 2630765205.0144],
  [1231773, 2165767200, 1, 2670713466.4872003],
  [8196828, 104576400, 0, 857194763.6592],
  [7517829, 753285600, 0, 5663072328.9623995],
  [8609652, 2828538000, 0, 24352727848.775997],
  [9665292, 756219600, 0, 7309083250.123199],
  [8325068, 1752922800, 0, 14593201508.7504],
  [5633250, 1929790800, 1, 10884621982.499998],
  [5559927, 3394436400, 0, 18872818590.1428],
  [6528109, 1284487200, 0, 8385272450.7048],
  [8218474, 3280795200, 1, 26983012182.825603],
  [7029561, 544957200, 1, 3847815793.7604],
  [1861138, 843116400, 0, 1569155970.4631999],
  [2669652, 3587871600, 0, 9578368592.683199],
  [6427735, 3509755200, 0, 22559776340.471996],
  [6323504, 2452550400, 1, 15524010085.4784],
  [7971509, 3175581600, 0, 25314177304.6344],
  [6130605, 2655032400, 1, 16291786066.217999],
  [5898065, 1362250800, 0, 8034643764.702],
  [4957004, 195724800, 0, 970208616.4991999],
  [7187355, 3237994800, 0, 23272618115.753998],
  [7721913, 2239437600, 1, 17311423168.0584],
  [7636266, 749984400, 1, 5745554028.9576],
  [2517222, 3482622000, 0, 8766532716.084],
  [5108564, 595641600, 1, 3055231872.6912],
  [9789963, 1934056800, 0, 18934344511.8984],
  [4404505, 3034796400, 1, 13377431296.277998],
  [2844274, 700164000, 1, 1998339128.5967999],
  [5633983, 477144000, 1, 2701850916.2256002],
  [2558516, 1343660400, 0, 3437776631.9664],
  [3495025, 3374478000, 0, 11793884971.95],
  [990474, 137048400, 0, 135742876.9416],
  [7091637, 719161200, 1, 5117186263.1147995],
  [1692734, 2754889200, 0, 4663294615.0728],
  [3972993, 292467600, 1, 1171583192.1924],
  [1147378, 2331972000, 0, 2675653369.416],
  [9354289, 2052226800, 1, 19219752476.694],
  [4367640, 510642000, 0, 2230300424.8799996],
  [7765051, 2306973600, 0, 17913767659.6536],
  [7933617, 1449676800, 0, 11501180504.9856],
  [1015995, 1162242000, 0, 1180832060.79],
  [4059606, 1469307600, 0, 5964809948.805599],
  [67131, 3179638800, 0, 213452332.2828],
  [2724459, 3422883600, 0, 9325506029.9724],
  [8421821, 3528241200, 1, 29734589900.588398],
  [8626951, 2315606400, 1, 19997493267.9456],
  [6725628, 3464863200, 1, 23319651593.3472],
  [8510437, 1443276000, 0, 12282909471.612],
  [1027646, 1741860000, 1, 1792501542.7632003],
  [3835863, 3591100800, 0, 13774970687.990398],
  [7703022, 2448082800, 0, 18857635666.2216],
  [2935964, 3086463600, 1, 9068848701.0192],
  [5205182, 3164590800, 0, 16472271069.525599],
  [6940609, 2438578800, 1, 16942012687.782],
  [4634543, 2115194400, 0, 9802959400.159199],
  [6640261, 78148800, 0, 518928428.8368],
  [3493787, 2554772400, 1, 8934282768.589201],
  [6924930, 1192399200, 1, 8274033782.712],
  [3259870, 1082077200, 1, 3535317279.468],
  [4214743, 1645678800, 1, 6946309508.813999],
  [2008807, 2152072800, 1, 4327958611.044],
  [7487982, 2928834000, 0, 21931056272.988],
  [7949644, 532292400, 1, 4250766862.6703997],
  [923444, 3010665600, 0, 2780181084.3264],
  [1751733, 427312800, 1, 752775725.556],
  [1195336, 3557646000, 0, 4252582339.0559998],
  [5639592, 1080583200, 1, 6107691671.0208],
  [5283889, 3294835200, 0, 17409543470.092796],
  [2484346, 1708999200, 1, 4251755456.3664002],
  [3353778, 2144556000, 0, 7192364732.568],
  [55113, 2957670000, 1, 163139396.07959998],
  [988717, 2457446400, 1, 2432110936.4351997],
  [5533496, 3035012400, 0, 16794228975.350399],
  [9949533, 2261520000, 0, 22501067870.159996],
  [1991251, 1032022800, 1, 2059833666.942],
  [4201000, 1615921200, 1, 6798648020.4],
  [4303003, 2857489200, 1, 12306194424.925198],
  [3668028, 2849871600, 1, 10462282518.5424],
  [1359911, 2215004400, 0, 3012208848.6084],
  [4167468, 3068564400, 0, 12788143942.939198],
  [2341091, 2943554400, 0, 6891128713.8504],
  [7151451, 2962000800, 1, 21199904373.420002],
  [6082619, 800395200, 1, 4883214122.913599],
  [9624650, 2622085200, 0, 25236652320.179996],
  [3421328, 842461200, 1, 2890612969.1712],
  [8721682, 3570904800, 0, 31144296117.8736],
  [5345644, 3126895200, 0, 16715268564.5088],
  [6908171, 339728400, 0, 2346901880.7563996],
  [1789316, 647305200, 0, 1158233551.2431998],
  [6450355, 2089472400, 0, 13477838742.702],
  [5885880, 3449203200, 0, 20301596130.815998],
  [3987700, 2195262000, 1, 8763693321.24],
  [7831450, 2289787200, 0, 17932353967.44],
  [1487807, 3218850000, 0, 4789027561.95],
  [155707, 1879426800, 1, 293016595.122],
  [5927819, 2968923600, 0, 17599241725.6284],
  [9768714, 1077534000, 1, 10549753944.1848],
  [8816180, 3287419200, 0, 28982479402.656],
  [2119184, 471690000, 1, 1004724630.8928],
  [3202573, 931654800, 0, 2983692507.8004],
  [429387, 1832713200, 0, 786943222.8083999],
  [2250878, 3230395200, 0, 7271225486.9855995],
  [2726951, 3578450400, 0, 9758258896.730398],
  [285725, 98503200, 0, 28144826.82],
  [5240878, 1554073200, 1, 8157386776.327199],
  [1002140, 1145786400, 1, 1150662759.9840002],
  [1116233, 1648076400, 1, 1842337655.0748],
  [3465667, 1634763600, 1, 5673930402.927599],
  [3066499, 26510400, 0, 81294115.0896],
  [641751, 838375200, 1, 539580646.9943999],
  [9466279, 1389506400, 0, 13153455254.6856],
  [8902908, 657864000, 1, 5878440583.5456],
  [3826410, 3164144400, 1, 12116570624.675999],
  [9649438, 1299535200, 0, 12539784341.2176],
  [5600548, 2947503600, 1, 16521184237.694399],
  [9517972, 481377600, 0, 4581738518.2272005],
  [7674924, 640825200, 0, 4918284707.2848],
  [8651125, 1871877600, 0, 16193847102.300001],
  [9185695, 1891922400, 1, 17400844163.412],
  [1465662, 3165742800, 0, 4639908923.7336],
  [8191206, 3300951600, 1, 27058590717.184795],
  [9160330, 1136502000, 1, 10432894035.996],
  [1525384, 3494422800, 1, 5334026837.328],
  [6494162, 882943200, 0, 5733976177.598399],
  [2583645, 3089145600, 0, 7981255583.711999],
  [5277633, 2330218800, 0, 12298039636.100399],
  [226406, 1808013600, 1, 409892848.5168],
  [8152065, 1403636400, 0, 11442535169.166],
  [8213837, 713638800, 0, 5861712780.0756],
  [6769820, 3455013600, 1, 23406197718.095997],
  [1745376, 853113600, 1, 1493226416.3328],
  [2210121, 1708491600, 1, 3781319888.2068],
  [3907445, 3028302000, 1, 11842376399.334],
  [2834723, 393591600, 1, 1122580923.0084],
  [134640, 2491477200, 0, 335452490.20799994],
  [9396131, 1344402000, 1, 12654908428.7772],
  [8631606, 1724950800, 0, 14889095674.9848],
  [4571105, 182818800, 0, 835683930.774],
  [3666189, 3510511200, 1, 12879066790.2456],
  [8675447, 611697600, 0, 5306750108.8272],
  [3538360, 1091106000, 0, 3860725826.16],
  [3424336, 1660381200, 0, 5685703116.8832],
  [4386333, 3140553600, 1, 13786125310.7424],
  [6093150, 2145276000, 0, 13071488459.4],
  [3445885, 8154000, 0, 28097746.289999995],
  [2060169, 3356625600, 1, 6920199966.571199],
  [287660, 2492658000, 0, 717038000.28],
  [8646964, 1246035600, 0, 10774424975.918398],
  [3095268, 323398800, 1, 1008494029.224],
  [7475808, 665593200, 0, 4975846969.3056],
  [964222, 3177835200, 1, 3066471258.0768],
  [7730255, 99687600, 0, 770610568.3379999],
  [2718584, 2412000, 1, 13134023.020799998],
  [8154173, 3039332400, 0, 24783242194.1052],
  [2177223, 3274538400, 0, 7129400318.863199],
  [8539126, 323614800, 1, 2784045406.284],
  [4800963, 3366018000, 1, 16171742365.023598],
  [1471867, 225982800, 1, 336177366.534],
  [5661872, 1794776400, 1, 10175491446.163198],
  [2564277, 2315120400, 0, 5936609993.950799],
  [4022424, 591512400, 1, 2389044722.1984],
  [7956861, 194828400, 0, 1550222497.6524],
  [9127611, 986234400, 0, 9001963958.0184],
  [3969197, 146606400, 0, 581909683.0608],
  [9245975, 754005600, 1, 6993884790.18],
  [6867948, 2865816000, 0, 19682275265.567997],
  [7364513, 843231600, 0, 6209990080.2108],
  [4934285, 1958698800, 1, 9676715130.63],
  [6105255, 597600000, 1, 3663270220.896],
  [5327275, 3250882800, 1, 17331234412.05],
  [43214, 1742616000, 0, 75305407.82399999],
  [2476660, 216777600, 1, 542875946.688],
  [7629970, 142333200, 0, 1085998046.004],
  [6194270, 897649200, 0, 5560281510.084],
  [2871594, 1236315600, 0, 3550196459.0664],
  [5254453, 1458435600, 1, 7675992886.4244],
  [1501067, 3541006800, 0, 5315288454.2556],
  [3753585, 2946578400, 1, 11069313156.396],
  [6566407, 84722400, 0, 556321760.4168],
  [9770027, 3453188400, 1, 33761379553.405197],
  [4513696, 3076592400, 1, 13897722342.873598],
  [6889313, 977864400, 1, 6753480549.1668],
  [330850, 1132826400, 1, 375596006.76],
  [7310905, 1477994400, 1, 10823163190.307999],
  [539150, 2936232000, 1, 1584373794.48],
  [497004, 2114409600, 0, 1050870028.8384],
  [1793216, 1100894400, 1, 1978479600.5376],
  [1602659, 1017795600, 0, 1631179278.5003998],
  [4407531, 2420078400, 1, 10677233269.425598],
  [9932418, 1988380800, 1, 19773457754.399998],
  [5959316, 949896000, 1, 5675147208.4032],
  [4845015, 3328959600, 1, 16140580256.682001],
  [7134930, 1141516800, 1, 8161903284.48],
  [5588768, 1953208800, 1, 10929551186.304],
  [7746991, 1131256800, 0, 8763836248.2888],
  [4068014, 2024542800, 0, 8235868453.9992],
  [624363, 963939600, 0, 601848220.4748],
  [4630308, 2857399200, 1, 13241840016.067198],
  [7311370, 1170345600, 1, 8574517375.775999],
  [3648455, 1091880000, 0, 3983675045.3999996],
  [7512558, 649515600, 1, 4897697997.218399],
  [7059656, 2445685200, 0, 17265696196.2912],
  [9942368, 2307434400, 0, 22941361940.6592],
  [21530, 869562000, 1, 18773755.235999998],
  [5224967, 1923836400, 0, 10051981703.3988],
  [700719, 745290000, 0, 522238863.51],
  [9480630, 2833074000, 1, 26882261896.716],
  [2581227, 1498014000, 0, 3866714183.1779995],
  [513, 20689200, 1, 11854.6092],
  [2703861, 826423200, 1, 2241074640.5063996],
  [7661629, 3460204800, 0, 26510805441.619198],
  [8692271, 1659646800, 0, 14426099749.8828],
  [2325019, 2102054400, 1, 4892941104.9984],
  [1082868, 348037200, 0, 376878346.6896],
  [5896710, 1885464000, 1, 11132299744.272],
  [8077890, 666338400, 0, 5382608297.976],
  [1001244, 1329015600, 0, 1330668895.4064],
  [9631432, 45910800, 1, 465487108.56],
  [8234317, 2054088000, 0, 16914011737.895998],
  [3240955, 1407243600, 0, 4560813181.6380005],
  [482846, 2789096400, 0, 1346704040.3544],
  [3706693, 536151600, 0, 1987349382.6588001],
  [4967774, 1998734400, 0, 9929260785.2256],
  [7800511, 585680400, 0, 4568606402.6844],
  [8166218, 1259910000, 1, 10308455434.9656],
  [248487, 1670461200, 0, 415087892.2044],
  [7308996, 2547640800, 0, 18620696416.6368],
  [1004734, 2904836400, 0, 2918587895.5176],
  [3668743, 1045213200, 0, 3834618611.0076],
  [8525185, 101642400, 1, 887144391.3960001],
  [6204149, 955209600, 0, 5926262684.6304],
  [3236879, 1910268000, 0, 6183306373.5720005],
  [4419492, 1781852400, 0, 7874882426.9808],
  [7517772, 2880486000, 1, 21673023991.2144],
  [4148390, 1334293200, 1, 5545204353.036],
  [5091299, 2717535600, 1, 13848103153.285198],
  [7375093, 471542400, 1, 3495510878.4287996],
  [9526006, 3440055600, 0, 32769990285.933598],
  [770247, 1532084400, 1, 1181946794.3892],
  [8197860, 2807568000, 1, 23035881667.392],
  [8083841, 2050963200, 0, 16579660405.6512],
  [6043370, 3585625200, 0, 21669259764.924],
  [2809220, 164268000, 1, 468261015.98399997],
  [6755073, 1926579600, 0, 13014185838.310799],
  [7497889, 176511600, 0, 1323464384.0124],
  [6992050, 1566248400, 0, 10951287125.22],
  [5738527, 947937600, 0, 5439765511.915199],
  [3842829, 3345634800, 1, 12865999004.765999],
  [4240053, 2649524400, 0, 11234123880.7932],
  [4574661, 421174800, 1, 1937798951.634],
  [3405398, 1582650000, 1, 5397791483.5416],
  [7484726, 725540400, 0, 5430471095.9304],
  [684627, 1295478000, 0, 886919216.706],
  [5860404, 3552109200, 0, 20816794964.1168],
  [7328871, 1468119600, 1, 10777389165.6948],
  [3748431, 1037210400, 1, 3896979821.1575994],
  [3135826, 3244989600, 0, 10175722757.4096],
  [7506167, 385171200, 0, 2891159350.7904],
  [8564288, 3490808400, 1, 29917007215.948795],
  [783469, 1017878400, 1, 799371540.3744],
  [1442296, 1096848000, 0, 1581979483.0080001],
  [8994690, 2953281600, 1, 26585612428.752003],
  [4109560, 2091625200, 1, 8605601104.464],
  [6292844, 488772000, 1, 3090989595.7728],
  [4272852, 2521134000, 0, 10772432454.168],
  [4743169, 1965142800, 1, 9332479083.977999],
  [7464617, 1899216000, 1, 14194978441.7184],
  [7556408, 3386818800, 0, 25592184674.8704],
  [5936437, 2854868400, 0, 16947746399.890799],
  [1975685, 2838578400, 1, 5612916343.356],
  [6331019, 3075454800, 1, 19486078773.606],
  [4943663, 2355436800, 0, 11644485756.9984],
  [2691877, 3012166800, 0, 8108382529.083599],
  [9937738, 913075200, 1, 9097943487.6672],
  [2103185, 3560544000, 1, 7493570757.792],
  [5087268, 585608400, 0, 2979146873.8512],
  [7998509, 776088000, 1, 6226896845.7648],
  [8984602, 1228014000, 0, 11033217040.428],
  [3238554, 736610400, 0, 2385552557.3616],
  [9903707, 2656252800, 0, 26306749449.129597],
  [4640932, 1597647600, 1, 7425801214.257599],
  [4236115, 3550057200, 1, 15048698565.186],
  [9915390, 3097789200, 0, 30715788055.788002],
  [1680353, 3075746400, 0, 5168339690.4792],
  [2442395, 1047362400, 1, 2563981330.932],
  [7126839, 1945954800, 1, 13885747809.786],
  [2625906, 1300417200, 0, 3414773327.9832],
  [843191, 302796000, 0, 255314862.03599998],
  [4724521, 1904796000, 0, 8999248702.716],
  [3866006, 947386800, 0, 3662603053.1207995],
  [1809540, 1043139600, 1, 1891980470.952],
  [70203, 3004063200, 0, 210894248.8296],
  [7135095, 2618301600, 0, 18681830654.652],
  [626706, 414982800, 1, 261588337.812],
  [3639806, 1972191600, 0, 7178394818.829599],
  [1710524, 788418000, 0, 1348607911.032],
  [2444866, 293205600, 0, 716848402.4496],
  [8560002, 1440885600, 1, 12354691974.609598],
  [3151905, 1348358400, 1, 4257522671.328],
  [4900357, 3299932800, 0, 16170848796.0096],
  [5039214, 3195525600, 1, 16115128207.3872],
  [7229088, 1841094000, 0, 13309430542.272],
  [1668421, 3420475200, 1, 5710828897.7424],
  [8077648, 1921586400, 1, 15541439986.828798],
  [6030399, 1142445600, 1, 6903991545.055201],
  [3773693, 3199921200, 1, 12084649551.0972],
  [4936498, 165589200, 0, 817430754.6215999],
  [4645233, 180691200, 1, 850590472.7232],
  [3979721, 2412691200, 1, 9611465576.198399],
  [5732041, 158209200, 1, 920728574.5644],
  [8759175, 769838400, 1, 6764339463.48],
  [5769792, 2789499600, 1, 16108790756.889599],
  [7601296, 1085220000, 1, 8267467500.4032],
  [3133512, 1256292000, 1, 3944186649.7344003],
  [2363169, 2438470800, 0, 5762518601.9652],
  [3828136, 1741312800, 0, 6665982216.9408],
  [2237337, 3215574000, 0, 7194322686.437999],
  [9472704, 772084800, 0, 7313730773.2992],
  [5848500, 2392117200, 0, 13990297444.199999],
  [1517016, 3163561200, 1, 4802842922.4864],
  [3439026, 266299200, 0, 915809872.5791999],
  [7710930, 3440473200, 0, 26529248012.075996],
  [9007055, 877791600, 1, 7928107087.194],
  [4313320, 3283059600, 1, 14171321417.616],
  [7476118, 3398014800, 0, 25403959610.5464],
  [3269085, 2872368000, 0, 9390015143.28],
  [4395931, 1574319600, 0, 6920600333.5476],
  [6195929, 2714288400, 0, 16817538211.9236],
  [5479369, 3434403600, 1, 18831620308.813198],
  [5909183, 892087200, 0, 5271506516.7576],
  [9721651, 3390411600, 0, 32960398321.551598],
  [8588434, 850204800, 1, 7322704950.815999],
  [6761195, 793972800, 1, 5384561608.440001],
  [9852053, 3356114400, 1, 33088451029.480797],
  [5338969, 3531448800, 0, 18854295668.287197],
  [7022132, 3095103600, 1, 21751213974.6096],
  [7189345, 3433546800, 0, 24684952518.845997],
  [9021604, 230450400, 0, 2079032250.4416],
  [9034229, 2549721600, 1, 23056624427.4432],
  [926150, 3091719600, 1, 2865636649.62],
  [3646401, 2868876000, 0, 10461072315.276],
  [1928693, 1677218400, 0, 3234839387.5512],
  [2216898, 1292443200, 0, 2865214745.1936],
  [7480685, 1673470800, 1, 12536805184.65],
  [6250381, 2179011600, 1, 13634773625.1348],
  [6835589, 2351095200, 1, 16087657143.9816],
  [4059316, 1899230400, 0, 7709576350.4064],
  [1627154, 330951600, 0, 538509219.7464],
  [4298714, 648324000, 1, 2797358904.2447996],
  [5739013, 983329200, 0, 5643339062.0796],
  [2942826, 258987600, 0, 762155442.9575999],
  [6032889, 2608920000, 0, 15739324769.88],
  [6328386, 1268902800, 1, 8045416346.292],
  [237727, 2451675600, 0, 582829485.3612],
  [9496820, 2269267200, 0, 21550822130.304],
  [8343812, 3432708000, 1, 28662055552.8864],
  [7282217, 720572400, 0, 5247364581.010799],
  [9002605, 1563141600, 0, 14072346383.867998],
  [528916, 76694400, 1, 41844448.857599996],
  [6224999, 3304890000, 0, 20572936945.109997],
  [866905, 1566673200, 1, 1360254047.0219998],
  [7702654, 3388579200, 1, 26119687389.7536],
  [8540402, 2631024000, 0, 22470002631.648],
  [1321557, 2547388800, 0, 3366519500.3615994],
  [9706136, 2445537600, 0, 23736720538.713596],
  [2162960, 2918091600, 0, 6311715407.136],
  [742409, 3113071200, 0, 2311172076.5208],
  [7552993, 3413095200, 0, 25779084153.9336],
  [7328241, 2999048400, 1, 21995477926.4916],
  [8370189, 2758356000, 0, 23087961049.284],
  [5487234, 1545372000, 1, 8493092497.5408],
  [5149758, 2473920000, 1, 12752547605.913599],
  [5687639, 2607285600, 0, 14829299262.6984],
  [5217630, 2987348400, 1, 15599501122.788],
  [2726811, 2016687600, 1, 5505722632.4148],
  [5335758, 2047842000, 0, 10926789334.235998],
  [6040029, 2692288800, 1, 16276114466.531998],
  [3307638, 1707652800, 1, 5656299129.936],
  [4391695, 2559744000, 1, 11252239314.623999],
  [8967681, 3132086400, 1, 28109246313.513596],
  [8250781, 406569600, 1, 3374477020.2527995],
  [2709022, 2709716400, 0, 7340681341.3608],
  [4755700, 1009537200, 1, 4812561051.48],
  [2380055, 934257600, 0, 2223584472.168],
  [992234, 1370973600, 1, 1362727031.5152],
  [5269291, 3395073600, 0, 17889630764.8176],
  [5768938, 2920770000, 0, 16849741042.259998],
  [645992, 1120687200, 0, 723954965.7024],
  [6605227, 3117996000, 1, 20611050730.2504],
  [7230785, 2113923600, 1, 15302819773.098001],
  [546590, 2805598800, 1, 1534834558.6200001],
  [5226092, 104421600, 1, 558359850.1536],
  [9562134, 233380800, 1, 2254751197.2000003],
  [3563272, 651542400, 1, 2330243058.3552],
  [8331132, 1437670800, 1, 11997579881.880001],
  [3685786, 3548613600, 1, 13088346979.780798],
  [9179324, 651546000, 1, 6002958455.524799],
  [3125978, 2680045200, 0, 8377762334.2056],
  [2655170, 3157560000, 0, 8383858585.2],
  [462816, 2093173200, 0, 968754047.7312],
  [1423159, 1211101200, 0, 1723589572.6907997],
  [7345434, 1415790000, 1, 10417362076.7928],
  [1783230, 3226590000, 0, 5753752085.7],
  [1443451, 1673834400, 0, 2416097938.5144],
  [108677, 1067904000, 0, 116056603.008],
  [7482803, 2316769200, 0, 17335927520.0676],
  [7225711, 1027216800, 1, 7439852171.195999],
  [26806, 1533142800, 1, 41162274.971999995],
  [5634442, 71413200, 0, 402373533.4344],
  [7216170, 1089234000, 0, 7860097713.78],
  [2784016, 719445600, 0, 2002948061.5296],
  [2797002, 424886400, 0, 1188408110.5728],
  [3069494, 1524474000, 0, 4679363796.155999],
  [3834536, 2861697600, 1, 10982558977.8048],
  [4399827, 3267543600, 0, 14376626554.957201],
  [93312, 380606400, 1, 35740884.7872],
  [7913267, 2064006000, 0, 16333030567.602],
  [1311377, 2805390000, 0, 3678923922.03],
  [7373065, 1438362000, 0, 10605136519.529999],
  [3322282, 2999228400, 1, 9972319791.8232],
  [6251368, 150073200, 0, 938162800.1376],
  [3213653, 2433916800, 1, 7829538495.407999],
  [7194272, 2709032400, 1, 19506920325.2352],
  [7927603, 3191778000, 0, 25303148848.134],
  [328690, 536144400, 0, 176225302.836],
  [3746200, 1374408000, 0, 5148807249.6],
  [5665897, 964137600, 0, 5462704335.4272],
  [38610, 752385600, 0, 29049608.016],
  [4206214, 420109200, 0, 1767069198.5688],
  [4875760, 3348954000, 1, 16340491393.631998],
  [6310395, 468640800, 0, 2957308561.1159997],
  [1140048, 3376810800, 0, 3849726398.9184],
  [4489949, 489913200, 0, 2199685282.4268003],
  [2615816, 2638184400, 0, 6901004964.470399],
  [1257720, 2184933600, 1, 2751077363.6159997],
  [8706580, 650545200, 1, 5685086785.752],
  [3555932, 2123146800, 1, 7558368157.511999],
  [8697418, 2775988800, 1, 24164975750.543995],
  [263225, 3581690400, 0, 942790455.54],
  [7972161, 987850800, 1, 7894591873.47],
  [6333078, 3572478000, 0, 22624781827.283997],
  [7449935, 664992000, 1, 4972170058.272],
  [5405259, 3172838400, 1, 17163089719.7184],
  [1397590, 1097830800, 0, 1534317347.7719998],
  [7491909, 832622400, 1, 6256055678.4144],
  [6950933, 959972400, 1, 6689519531.3628],
  [5207567, 371620800, 0, 1935240214.5936],
  [3016992, 152607600, 1, 467714615.3856],
  [3464881, 96588000, 1, 343048166.1431999],
  [2919450, 599540400, 0, 1750328220.78],
  [3126921, 2498569200, 0, 7812828501.4332],
  [5252020, 2834917200, 1, 14901747519.528],
  [5806752, 2023891200, 0, 11752234273.382399],
  [8324175, 2718133200, 0, 22626216430.11],
  [563616, 3139617600, 1, 1770902213.0688],
  [8171615, 384278400, 1, 3159943908.6239996],
  [9893984, 1904256000, 1, 18864613921.9968],
  [500748, 2323911600, 0, 1163694085.8767998],
  [3522622, 60181200, 1, 220517546.24879998],
  [7971698, 2358864000, 0, 18804151431.072],
  [7503324, 1815616800, 1, 13641313151.663998],
  [3284909, 1922050800, 0, 6313761971.3772],
  [493371, 493455600, 0, 243456682.8276],
  [7421329, 1388239200, 1, 10320533513.013601],
  [6261534, 1631998800, 1, 10233963877.212],
  [8937514, 1302609600, 0, 11642091536.5344],
  [9602332, 2547133200, 0, 24458418634.6224],
  [8940977, 692157600, 1, 6210195193.5336],
  [4227704, 1941253200, 1, 8217271580.1696005],
  [1369430, 1144652400, 1, 1570834261.188],
  [1532815, 787640400, 1, 1211015205.7740002],
  [6957893, 147751200, 1, 1044869574.9671999],
  [958027, 1878602400, 0, 1799751821.4648],
  [1802031, 3039361200, 1, 5481382575.992399],
  [7573741, 1300096800, 0, 9846596438.1288],
  [6599699, 823183200, 1, 5448727333.677599],
  [4833351, 2986502400, 0, 14434814361.542398],
  [9076673, 2930590800, 1, 26621972675.73],
  [117375, 2102014800, 0, 246723987.14999998],
  [7260100, 2507986800, 1, 18225798600.6],
  [3425607, 2221858800, 1, 7619502286.745999],
  [9251943, 3015673200, 0, 27900836553.027596],
  [2429204, 2761257600, 1, 6713534737.2671995],
  [1373578, 3435386400, 0, 4718771180.5392],
  [3223572, 2509916400, 0, 8090896229.380799],
  [5273496, 3389983200, 1, 17889820486.7904],
  [5137613, 1041843600, 1, 5365018136.696401],
  [4825609, 695430000, 1, 3367547380.1628],
  [5822759, 1914894000, 1, 11164052691.1188],
  [8992270, 253317600, 0, 2277900254.9519997],
  [5111536, 3081866400, 0, 15753071050.7904],
  [7273093, 2156691600, 1, 15703413645.7044],
  [5153710, 3325186800, 1, 17149516318.259998],
  [6381358, 3543732000, 0, 22613822548.056],
  [507787, 551862000, 1, 281456787.7044],
  [3631075, 1369674000, 1, 4982173316.190001],
  [6369026, 1063699200, 0, 6774727860.979199],
  [1309411, 1697418000, 0, 2222617800.798],
  [6255661, 2617434000, 0, 16373779793.874],
  [5665540, 1578438000, 1, 8956409700.888],
  [6306880, 2001016800, 0, 12620172835.584],
  [6619380, 763657200, 0, 5054937196.535999],
  [8344288, 1131454800, 1, 9461371211.711998],
  [931237, 180684000, 1, 170512474.6584],
  [1043140, 24638400, 0, 25701300.575999998],
  [5602187, 2972642400, 0, 16653298608.928799],
  [427218, 2566710000, 0, 1096544712.78],
  [7792613, 2568902400, 1, 20037314127.340797],
  [4940199, 2435353200, 1, 12043080772.7076],
  [5525078, 1757937600, 0, 9712742359.1328],
  [8875614, 1994428800, 0, 17701780179.2832],
  [9700311, 2330074800, 0, 22602450213.2628],
  [8378753, 3301120800, 1, 27679545685.62],
  [5891928, 3101796000, 1, 18289812454.9056],
  [6003086, 136864800, 0, 821611164.7728],
  [1638822, 3205472400, 0, 5253198689.5128],
  [4202050, 2852841600, 0, 11987783045.279999],
  [7535811, 2475835200, 0, 18657426134.3472],
  [7755794, 3230906400, 0, 25058244471.6816],
  [9646623, 3578943600, 0, 34524719647.4628],
  [4339621, 2635758000, 0, 11438190767.718],
  [7024817, 22179600, 0, 155807631.1332],
  [1850580, 2054761200, 1, 3806976904.632],
  [9194022, 1174773600, 1, 10823136501.4416],
  [1134383, 617986800, 1, 703778019.498],
  [6412098, 740350800, 0, 4747201883.978399],
  [9828735, 1500022800, 0, 14743326595.158],
  [4007382, 329612400, 1, 1330577457.2712],
  [2334428, 3001014000, 1, 7011298558.2095995],
  [5403827, 2998540800, 1, 16216668673.92],
  [6999697, 3305718000, 0, 23139024367.446],
  [2943114, 3378276000, 1, 9949771372.8528],
  [4184056, 1641358800, 0, 6867537135.2928],
  [1966118, 3560911200, 1, 7005928039.387199],
  [9979945, 2118974400, 1, 21171391451.351997],
  [1527655, 619102800, 1, 949471190.91],
  [7924268, 46771200, 1, 389797912.6272],
  [3574711, 2879017200, 0, 10291654454.0292],
  [3662471, 2346292800, 1, 8602089587.352001],
  [4775157, 1573653600, 0, 7514443003.6152],
  [7298886, 1453813200, 1, 10628874277.1064],
  [9774985, 3333916800, 1, 32612634354.96],
  [4275714, 1261807200, 1, 5405470517.649599],
  [8550215, 2433459600, 1, 20827287453.941998],
  [4307587, 1780909200, 1, 7681842232.5708],
  [360537, 696967200, 1, 252154674.49679998],
  [3174035, 885528000, 0, 2810696865.48],
  [8225982, 2225667600, 1, 18328201911.2376],
  [5697473, 1982685600, 1, 11310081000.1704],
  [2274837, 2786623200, 1, 6344616846.088799],
  [8526627, 1434445200, 1, 12251606788.3788],
  [1688539, 2506816800, 1, 4236942846.204],
  [749254, 2699222400, 1, 2024215775.3663998],
  [3330620, 1738720800, 1, 5799075706.8],
  [9450760, 1362996000, 1, 12904211355.551998],
  [2461096, 1116864000, 1, 2754663406.3872],
  [9726181, 1945519200, 1, 18946001455.2504],
  [8872575, 1305594000, 1, 11605445217.99],
  [4909087, 515905200, 1, 2544499573.8227997],
  [8164764, 989467200, 0, 8078766173.7408],
  [1333832, 789120000, 1, 1055780314.2143999],
  [1145168, 2149045200, 0, 2461017793.5936],
  [6900853, 747820800, 1, 5177295954.719999],
  [9965388, 2999426400, 0, 29890447853.443195],
  [6695041, 199843200, 1, 1354155060.7584],
  [283902, 1366441200, 0, 387935389.5624],
  [4438535, 997603200, 1, 4438634423.184],
  [9652010, 2560968000, 1, 24741838888.271996],
  [5120085, 503661600, 1, 2591176712.8679996],
  [869966, 2592914400, 0, 2255747368.9104],
  [568910, 1891533600, 1, 1077488687.4480002],
  [3389435, 1440547200, 1, 4890840819.984],
  [1536410, 934977600, 1, 1440225817.488],
  [4690106, 2771002800, 0, 12996296858.2968],
  [6646094, 1640858400, 0, 10905299167.0896],
  [8685041, 1886562000, 0, 16384868319.042],
  [399725, 2587402800, 0, 1034249584.23],
  [5626602, 125020800, 0, 703442283.3216],
  [980725, 2524291200, 1, 2478008057.04],
  [9339950, 134269200, 1, 1276662821.58],
  [9199179, 2852168400, 1, 26259862303.5804],
  [31403, 469342800, 1, 14814742.086],
  [8140833, 3558963600, 0, 28972928320.678795],
  [5788464, 3377379600, 1, 19563843681.043198],
  [85307, 3458091600, 0, 294999420.12119997],
  [9303, 809301600, 1, 7551438.602399998],
  [1354605, 1055527200, 0, 1429822422.7559998],
  [9581669, 1892106000, 0, 18129533404.914],
  [7624886, 3497403600, 0, 26667303745.9896],
  [1884574, 531453600, 1, 1006122798.1872],
  [7070828, 2000044800, 1, 14159078520.192],
  [6187818, 137995200, 1, 868858751.7792001],
  [261681, 1207000800, 1, 316482235.02],
  [332152, 2275570800, 1, 756638934.48],
  [4805395, 1735268400, 1, 8350275304.601999],
  [3056187, 2822587200, 1, 8633747834.5968],
  [5321123, 2980908000, 0, 15861778119.684],
  [1261893, 406396800, 1, 515882048.68799996],
  [3076486, 1586844000, 1, 4889345985.1152],
  [1521704, 2039223600, 0, 3103094709.0144],
  [7372028, 2285607600, 0, 16849563224.2128],
  [9467375, 2910978000, 1, 27582223816.349995],
  [2424499, 1799175600, 0, 4362099443.0244],
  [4538691, 1629882000, 1, 7408510765.7292],
  [8387394, 1354327200, 0, 11359275831.316801],
  [2739742, 808632000, 0, 2215443052.944],
  [9083459, 2680088400, 1, 24366447801.7884],
  [5496620, 134661600, 1, 753481066.896],
  [857706, 1834718400, 1, 1575723942.3456],
  [9493483, 993963600, 0, 9436176539.2188],
  [4929518, 3543616800, 1, 17480248290.648],
  [3866309, 3227047200, 1, 12486115007.5176],
  [6741274, 1419616800, 0, 9570025823.8032],
  [9910347, 3314638800, 1, 32873195799.126],
  [1927901, 2585880000, 1, 4989984615.9792],
  [8720750, 2215623600, 0, 19321899509.699997],
  [4660791, 2165756400, 1, 10105413322.8996],
  [8906104, 3096363600, 0, 27576536243.4144],
  [123363, 3562761600, 1, 439811399.0304],
  [6486361, 1654002000, 1, 10744145871.2532],
  [6992641, 1974052800, 0, 13803842545.4448],
  [310707, 416696400, 1, 130222150.7292],
  [1449552, 2241367200, 0, 3248978307.4944],
  [8244840, 3338337600, 0, 27524059377.984],
  [1944778, 2882750400, 0, 5606309557.4112],
  [4807377, 772232400, 0, 3712412278.4147997],
  [1062943, 1427302800, 1, 1519712991.846],
  [2953436, 985096800, 1, 2916565304.976],
  [882813, 222652800, 0, 196560786.32639998],
  [6622150, 1757556000, 1, 11654819770.68],
  [4456886, 2249841600, 1, 10038069627.8688],
  [974839, 939632400, 1, 918348639.6924001],
  [5397985, 1184313600, 1, 6405965853.408],
  [2225629, 1873450800, 1, 4174990672.23],
  [6482248, 3517257600, 1, 22815417897.446396],
  [2667339, 2920557600, 1, 7796570014.735199],
  [7206569, 1264399200, 1, 9129414210.069601],
  [4274546, 1429952400, 1, 6122738293.2936],
  [3851390, 2419516800, 1, 9327820091.039999],
  [9424950, 280785600, 1, 2669191079.7599998],
  [7662062, 759913200, 1, 5841038113.4088],
  [2703927, 3546565200, 1, 9596194741.7388],
  [7173866, 159602400, 1, 1162321247.5055997],
  [7979759, 865443600, 1, 6925335989.0652],
  [2119391, 2566101600, 0, 5438572636.1256],
  [6865146, 2240474400, 1, 15397792026.465597],
  [1387161, 2152670400, 1, 2989456244.6256],
  [1354295, 1684396800, 1, 2284446474.7200003],
  [7894328, 1105257600, 0, 8725266018.8928],
  [5048, 1896778800, 0, 9574939.382399999],
  [1949715, 2062436400, 0, 4021163185.626],
  [667178, 2804428800, 1, 1872667234.9439998],
  [323925, 895046400, 1, 290711544.47999996],
  [241243, 716428800, 1, 173417048.064],
];

const TestTokenName = "Test Token";

const expectWithin5PctErr = (line: number, x_: BigNumberish, y_: number) => {
  const x = BigNumber.from(x_);
  const y = BigNumber.from(Math.floor(y_));
  const b = (x.gt(y) ? x : y).mul(1e6).div(BigNumber.from(5).mul(1e6).div(100));
  assert.ok(
    x.sub(y).abs().lte(b),
    `line: ${line}, ${x_} - ${y_} > 0.05 difference!`
   );
};

const withSnapshot = async (k: () => Promise<void>) => {
  const snapshotId = await hre.network.provider.request({
    method: "evm_snapshot",
    params: []
  });

  await k();

  await hre.network.provider.request({
    method: "evm_revert",
    params: [snapshotId]
  });
};

describe("StakingV1", async () => {
  let signer: ethers.Signer;

  let signerAddr: string;

  let testToken: ethers.Contract;
  let stakingContract: ethers.Contract;

  let flyContract: ethers.Contract;

  before(async function() {
    const stakingContractFactory = await hre.ethers.getContractFactory("StakingV1");
    stakingContract = await stakingContractFactory.deploy();

    const testTokenFactory = await hre.ethers.getContractFactory("TestGovToken");
    testToken = await testTokenFactory.deploy(TestTokenName, "TT", 6, MaxUint256);

    await stakingContract.init(
      testToken.address, // fly token
      "0x0000000000000000000000000000000000000000", // zero since we don't use the merkle
      "0x0000000000000000000000000000000000000000", // zero since no emergency
      "0x0000000000000000000000000000000000000000", // zero for no operator
    );

    await testToken.approve(stakingContract.address, MaxUint256);

    ({ signer } = testToken);

    signerAddr = await signer.getAddress();
  });

  it("cant stake too little", async () => {
    await expect(stakingContract.stake(0)).to.be.revertedWith("too little fly");
  });

  it("can stake some", async () => {
    await withSnapshot(async () => {
      const amountStaked = 1000 * 1e6;
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      await stakingContract.stake(amountStaked);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr)
      expect(flyStaked).to.be.equal(amountStaked);
      await advanceTime(hre, 1000); // advance time by 1000 seconds
      await sendEmptyTransaction(signer);
      let points: BigNumber;
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(amountStaked);
      expect(points).to.be.equal(1000);
    });
  });

  it("cant double down on unstaking an amount, can only unstake an amount once", async () => {
    await withSnapshot(async () => {
      const amountStaked = 18281 * 1e6;
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      await stakingContract.stake(amountStaked);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr)
      expect(flyStaked).to.be.equal(amountStaked);
      await stakingContract.beginUnstake(amountStaked);
      const { flyStaked: curFlyStaked } = await stakingContract.stakingDetails(signerAddr);
      expect(curFlyStaked).to.be.equal(0);
      const amountUnstaking = await stakingContract.amountUnstaking(signerAddr);
      expect(amountUnstaking).to.be.equal(flyStaked);
      // second attempt, should break
      await expect(stakingContract.callStatic.beginUnstake(amountStaked))
        .to.be.revertedWith("no fly unstaked");
    });
  });

  it("cant stake for someone else", async () => {
  });

  it("staking for someone else is fine as merkle", async () => {
  });

  it("stake then unstake 0 doesnt cause weirdness", async () => {
    await withSnapshot(async () => {
      const amountStaked = BigNumber.from(41554 * 1e6);
      // simulate first
      expect(await stakingContract.callStatic.stake(amountStaked)).to.be.equal(amountStaked);
      // then send on-chain to continue the life of the testing
      await stakingContract.stake(amountStaked);
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr);
      expect(flyStaked).to.be.equal(amountStaked);
      const { flyRemaining } = await stakingContract.callStatic.beginUnstake(0);
      await stakingContract.beginUnstake(0);
      expect(flyRemaining).to.be.equal(0);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(amountStaked);
    });
  });

  it("stake, have a certain number of points in the future, begin unstaking, dont have the same points", async () => {
    withSnapshot(async () => {
      // stake first
      const amountStaked = BigNumber.from(4454545* 1e6);
      expect(await stakingContract.callStatic.stake(amountStaked))
        .to.be.equal(amountStaked);

      await stakingContract.stake(amountStaked);
      expect(await stakingContract.stakingPositionsLen(signerAddr))
        .to.be.equal(1);

      // now wait a seeminly random amount of time, get the points
      const waitTime = 444035535989;
      await advanceTime(hre, waitTime);
      await sendEmptyTransaction(signer);
      const curPoints = stakingContract.balanceOf(signerAddr);
      const { points: curPoints1 } =
        await stakingContract.stakingDetails(signerAddr);
      expect(curPoints).to.be.equal(curPoints1);

      // begin to unstake finally
      const { flyRemaining, unstakedBy } =
        await stakingContract.callStatic.beginUnstake(amountStaked);
      await stakingContract.beginUnstake(amountStaked);
      expect(flyRemaining).to.be.equal(0);

      // check the points are not the same, and that they're 0
      expect(await stakingContract.balanceOf(signerAddr)).to.be.equal(0);
      const { points: curPoints2 } =
        await stakingContract.stakingDetails(signerAddr);
      expect(curPoints2).to.be.equal(0);
    })
  });

  it("stake, have a certain number of points in the future, begin unstaking, unstake fully, dont have the same amount of points", async () => {
    await withSnapshot(async () => {
      // first, stake an arbitrary amount.
      const stakeAmount = BigNumber.from(
        // random number i chose
        "51317253906870152199262132321886643552971805669285596207895276767218547159680"
      );
      expect(await stakingContract.callStatic.stake(stakeAmount)).to.be.equal(stakeAmount);
      await stakingContract.stake(stakeAmount);
      // wait a couple of seconds to simulate a real user with real points.
      const firstDelaySeconds = 9603965;
      await advanceTime(hre, firstDelaySeconds);
      let { flyStaked, points } = await stakingContract.stakingDetails(signerAddr);
      // ensure that the fly staked has remained the same.
      expect(flyStaked).to.be.equal(stakeAmount);

      // second, begin to unstake. check that the points after beginning are 0, as well as the FLY.
      const unstakeAmount = stakeAmount.add(100);
      const { flyRemaining: unstakeFlyRemaining } =
        await stakingContract.callStatic.beginUnstake(unstakeAmount);
      console.log("we did the unstake");
      // since we didn't take the full amount, 100 is enough.
      expect(unstakeFlyRemaining).to.be.equal(100);

      // thirdly, begin the unstaking process.
      await stakingContract.beginUnstake(unstakeAmount);
      await stakingContract.beginUnstake(unstakeAmount);
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      // make sure that the points are 0.
      expect(flyStaked).to.be.equal(0);
      expect(points).to.be.equal(0);
      // make sure that the FLY that we're about to receive is recorded as being there.
      const amountUnstaking = await stakingContract.amountUnstaking(signerAddr);
      expect(amountUnstaking).to.be.equal(stakeAmount);

      // fourthly, attempt to unstake before the time. make sure nothing happens.
      await expect(stakingContract.callStatic.finaliseUnstake()).to.be.revertedWith("no fly returned");

      // finally, advance time, and finalise the withdraw.
      const unlockSeconds = SevenDays.add(1000);
      const secondsUntilFullyUnstaked = await stakingContract.secondsUntilFullyUnstaked(signerAddr);
      expect(secondsUntilFullyUnstaked).to.lt(unlockSeconds);
      await advanceTime(hre, unlockSeconds);
      await sendEmptyTransaction(signer); // advance time
      expect(await stakingContract.callStatic.finaliseUnstake()).to.be.equal(stakeAmount);
      await stakingContract.finaliseUnstake();
      ({ flyStaked, points } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(0);
      expect(points).to.be.equal(0);
    });
  });

  it("can unstake fully one position, leaving a few positions left", async () => {
    await withSnapshot(async () => {
      const s1 = BigNumber.from(41554 * 1e6);
      expect(await stakingContract.callStatic.stake(s1)).to.be.equal(s1);
      await stakingContract.stake(s1);
      let { flyStaked } = await stakingContract.stakingDetails(signerAddr);

      const s2 = BigNumber.from(17279899).mul(1e6);
      expect(await stakingContract.callStatic.stake(s2)).to.be.equal(s2);
      await stakingContract.stake(s2);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2));

      const s3 = BigNumber.from(172 * 1e6);
      expect(await stakingContract.callStatic.stake(s3)).to.be.equal(s3);
      await stakingContract.stake(s3);
      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2).add(s3));

      /*
       * unstake half of the second amount, and test that the time is correct,
       * as well as the new amount staked.
       */

      const flyUnstake1 = s2.div(2);
      let { flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake1);
      await stakingContract.beginUnstake(flyUnstake1);

      // the timestamp test isn't reliable, so we don't bother.
      //expect(await getLatestTimestamp(hre)).to.be.equal(unstakedBy.sub(604800));
      expect(flyRemaining).to.be.equal(0);

      // the amount of positions remaining should be equal to 2 since we
      // closed the newest position.
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(2);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s1.add(s2.sub(flyUnstake1)).add(s3));

      /*
       * unstake more than the second amount, this time the entire first position as well.
       */

      const flyUnstake2 = s2.sub(flyUnstake1).add(s1);
      ({ flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake2));

      await stakingContract.beginUnstake(flyUnstake2);
      expect(flyRemaining).to.be.equal(0);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s3);
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);

      /*
       * unstake just 1 this time.
       */

      const flyUnstake3 = 1;
      ({ flyRemaining } = await stakingContract.callStatic.beginUnstake(flyUnstake3));

      await stakingContract.beginUnstake(flyUnstake3);
      expect(flyRemaining).to.be.equal(0);

      ({ flyStaked } = await stakingContract.stakingDetails(signerAddr));
      expect(flyStaked).to.be.equal(s3.sub(1));
      expect(await stakingContract.stakingPositionsLen(signerAddr)).to.be.equal(1);
    });
  });

  it("should support staking with the permit router just fine", async () => {
    const chainId = await hre.network.provider.send("eth_chainId");
    const nonce = 0;

    const permitAmount = MaxUint256;
    const deadline = MaxUint256;

    // create the signature for testing the permit approval version of
    // the stake UX.

    const sig = await hre.network.provider.send(
      "eth_signTypedData_v4",
      [signerAddr, JSON.stringify({
        domain: {
          name: TestTokenName,
          version: "1",
          chainId: chainId,
          verifyingContract: testToken.address
        },

        primaryType: "Permit",

        types: {
          EIP712Domain: [
            { name: "name", type: "string" },
            { name: "version", type: "string" },
            { name: "chainId", type: "uint256" },
            { name: "verifyingContract", type: "address" },
          ],
          Permit: [
            { name: "owner", type: "address" },
            { name: "spender", type: "address" },
            { name: "value", type: "uint256" },
            { name: "nonce", type: "uint256" },
            { name: "deadline", type: "uint256" },
          ]
        },

        message: {
          owner: signerAddr,
          spender: stakingContract.address,
          value: permitAmount.toHexString(),
          nonce: nonce,
          deadline: deadline.toHexString(),
        }
      })]
    );

    const { r, s, v } = hre.ethers.utils.splitSignature(sig);

    const flyStaked = await stakingContract.callStatic.stakePermit(
      permitAmount, // fly amount
      deadline,
      v,
      r,
      s
    );

    expect(flyStaked).to.be.equal(permitAmount);
  });

  it("every automated test we created works", async () => {
    for (let i = 0; i < stakingTests.length; i++) {
      const [fly, seconds, isBonus, expectedPoints] = stakingTests[i];
      const points = await stakingContract.calculatePointsAddSecs(seconds, {
        receivedBonus: !!isBonus,
        flyVested: fly,
        depositTimestamp: 0 // we can set this to 0 for this function.
      });
      expectWithin5PctErr(i, points, expectedPoints);
    }
  });
});
